[{"path":"https://humlab-speech.github.io/superassp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fredrik Karlsson. Author, maintainer.","code":""},{"path":"https://humlab-speech.github.io/superassp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Karlsson F (2023). superassp: Praat, Python, MATLAB(TM) wrassp speech signal processing using wrassp-like interface. R package version 0.1.1, https://humlab-speech.github.io/superassp/.","code":"@Manual{,   title = {superassp: Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface},   author = {Fredrik Karlsson},   year = {2023},   note = {R package version 0.1.1},   url = {https://humlab-speech.github.io/superassp/}, }"},{"path":"https://humlab-speech.github.io/superassp/index.html","id":"an-extended-wrassp-package","dir":"","previous_headings":"","what":"Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface","title":"Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface","text":"idea make package functionality wrassp, extend analyses made avaiable Praat MATLAB. added functions behave wrassp-like manner, thereby callable similar way emuR framwork. praat_formant_burg provides illustration Praat script extracts formant values may wrapped inside R function produce SSFF formant track file.","code":""},{"path":"https://humlab-speech.github.io/superassp/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface","text":"loading package, also get functions exported wrassp package namespace. achieved superassp package Depending wrassp package (rather Importing, usually preferred way creating depmendencies R packages).","code":""},{"path":"https://humlab-speech.github.io/superassp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface","text":"package requires Praat program installed user’s PATH (‘/Applications’ Mac OS). simply install package using","code":"install.packages(\"devtools\") # If not installed already devtools::install_github(\"humlab-speech/superassp\",dependencies = \"Imports\")"},{"path":"https://humlab-speech.github.io/superassp/index.html","id":"indications-of-performance-of-praat-and-wrassp-functions","dir":"","previous_headings":"","what":"Indications of performance of Praat and wrassp functions","title":"Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface","text":"results Getting SSFF file wrassp function rather praat_formant_burg function, wrapped call Praat call also involves parsing csv file. Since parsing input output praat_formant_burg Praat calls already slows computation considerably, function also computes formant amplitudes (L) returning output increase usefulness function. praat_formantpath_burg function course additional bit slower method computing formant frequencies multiple formant tracks computed compared function used. Also, even adviced even though functions praat_sauce compute formant tracks (F B properties) well, really efficiently implemented really mostly correction harmonic amplitudes. , additional factor consider formant tracks stored praat_sauce function field file tracks computed function, likely result performance issue working tracks. , need formant frequency bandwidth estimations, really use one functions instead. Similarly, f0 computation using functions call Praat python considerably slower wrassp counterparts: rearranged output algorithms roughly ordered (median) time used compute output tracks. Please note relative timings necessarily indicative relative efficiency algorithms . communication R Praat / python severe impact performance, benchmarks indicate relative performance current version superassp. also noted computation already slow due process calling Praat superassp functions instead takes opportunity return information processing file. instance, praat_pitch returns two four tracks f_0 estimated may therefore worth wait. swipe estimates additional “pitch” track, reaper kaldi_pitch computes returns also normalized cross-correlation.","code":"library(microbenchmark) microbenchmark(   \"wrassp::forest\"=wrassp::forest(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE),   praat_formant_burg=praat_formant_burg(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE),  praat_formantpath_burg=praat_formantpath_burg(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE),   praat_sauce=praat_sauce(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE),  times=100 ) Unit: milliseconds                    expr        min         lq       mean     median        uq       max neval          wrassp::forest   26.42033   28.25807   28.93884   28.74673   29.4339   34.7792   100      praat_formant_burg  520.85644  556.63421  596.37337  578.95567  628.1025  777.4130   100  praat_formantpath_burg  669.06082  708.40986  751.45798  733.72906  776.1413 1170.8230   100             praat_sauce 3247.77570 3400.72715 3668.55957 3577.48971 3895.4160 4753.4219   100 library(microbenchmark) microbenchmark(   \"wrassp::ksvF0\"=wrassp::ksvF0(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"wrassp::mhsF0\"=wrassp::mhsF0(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"praat_pitch ac & cc\"=praat_pitch(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,corr.only=TRUE,windowShift=5),    \"praat_pitch all methods\"=praat_pitch(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,corr.only=FALSE,windowShift=5),     \"rapt\"=rapt(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),    \"kaldi pitch tracker\"=kaldi_pitch(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"swipe\"=swipe(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"reaper\"=reaper(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"yin\"=yin(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"pyin\"=pyin(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"dio\"=dio(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"crepe\"=crepe(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"harvest\"=harvest(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),   \"yaapt\"=yaapt(     file.path(getwd(),\"tests/signalfiles/msajc003.wav\"),toFile=FALSE,windowShift=5),  times=10 ) Unit: milliseconds                     expr          min           lq         mean       median           uq          max neval            wrassp::ksvF0     2.233792     2.281709     2.335946     2.299771     2.428917     2.459084    10            wrassp::mhsF0    16.071417    16.318417    16.747580    16.629147    16.911459    18.199459    10                      dio    96.165001    98.599834   113.813180   103.385646   109.233959   196.728834    10                     rapt   117.702001   123.111418   130.628734   125.266938   132.193834   172.862917    10                    swipe   132.854251   142.303001   154.309442   146.920792   149.362251   203.044126    10                      yin   174.342459   176.832625   184.944901   179.869314   185.566626   227.427792    10      kaldi pitch tracker   195.539792   198.606459   217.634276   203.737271   211.397167   336.594000    10                   reaper   232.866792   240.993793   817.140772   242.397271   244.391001  5989.057042    10                  harvest   327.358626   334.249459   341.861072   337.557001   353.730001   368.915709    10                     pyin   403.986376   410.861001   439.136880   440.595814   455.601042   500.009751    10      praat_pitch ac & cc   516.680042   536.404792   543.467217   546.130938   552.376292   557.215459    10                    crepe   566.955126   605.125417   853.842680   612.232230   650.363376  3008.081876    10                    yaapt   526.269001   575.632584   632.245809   626.762709   662.692500   849.112584    10  praat_pitch all methods 13428.942209 13825.150959 13894.481517 13884.433500 13964.615626 14224.678042    10"},{"path":"https://humlab-speech.github.io/superassp/index.html","id":"steps-to-implement-a-new-praat-function","dir":"","previous_headings":"","what":"Steps to implement a new Praat function","title":"Praat, Python, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface","text":"signal track (tracks) follows original sound wave value (limited list values) summarises acoustic properties wav file, can therefore sensibly shown alongside sound wave. case track(s) follow sound wave file returned, Praat function write output CSV table file return name table. Praat script also take desired output table file name (including full path) argument. Please refer praat/formant_burg.praat example code computes formants bandwidths (possibly windowed) sound file writes table. function computes sound wave following signal track (tracks), use code praat_formant_burg template. Please refer suitable function wrassp inspiration call sets tracks. (praat_formant_burg outputs “fm” “bw” set, formant frequencies formant bandwidths respectivelly) single value (list values) output, currently template function implemented, please note tjm.praat::wrap_praat_script(), cs_wrap_praat_script revised version , option return “Info window” Praat, opens lots possibilities. many moving parts whole package, make sure contruct test file test suit new function make sure works.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ComParE_2016.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","title":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","text":"function applies \"INTERSPEECH 2016 Computational Paralinguistics Challenge: Deception, Sincerity & Native Language\" ComParE (Weninger et al. 2013)  portion recording.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ComParE_2016.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","text":"","code":"ComParE_2016(listOfFiles, beginTime = 0, endTime = 0, explicitExt = \"ocp\")"},{"path":"https://humlab-speech.github.io/superassp/reference/ComParE_2016.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","text":"listOfFiles full path sound file. beginTime starting time section sound files analysed. endTime end time section sound files analysed. explicitExt file extension slice file results stored.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ComParE_2016.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","text":"list 6 373 acoustic values, names reported openSMILE. Please consult (Weninger et al. 2013)  description features.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ComParE_2016.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","text":"ComParE feature set consists 6 373 static acoustic features resulting computation various functionals low-level descriptor features, applied function using openSMILE (Eyben et al. 2010; Jaimes et al. 2013)  acoustic feature extraction library.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ComParE_2016.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the ComParE 2016 openSMILE feature set — ComParE_2016","text":"Eyben F, Wöllmer M, Schuller B (2010). Opensmile: munich versatile fast open-source audio feature extractor,  international conference. ACM. ISBN 978-1-60558-933-6, doi:10.1145/1873951.1874246 , http://dl.acm.org/citation.cfm?id=1874246. Jaimes (, Sebe N, Boujemaa N, Gatica-Perez D, Shamma DA, Worring M, Zimmermann R, Eyben F, Weninger F, Gross F, Schuller B (2013). “Recent developments openSMILE, munich open-source multimedia feature extractor.” Proceedings 21st ACM international conference Multimedia, 835--838. doi:10.1145/2502081.2502224 . Weninger F, Eyben F, Schuller BW, Mortillaro M, Scherer KR (2013). “Acoustics Emotion Audio: Speech, Music, Sound Common.” Frontiers Psychology, 4, 292. ISSN 1664-1078, doi:10.3389/fpsyg.2013.00292 , http://www.ncbi.nlm.nih.gov/pubmed/23750144.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/GeMAPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the GeMAPS openSMILE feature set — GeMAPS","title":"Compute the GeMAPS openSMILE feature set — GeMAPS","text":"function applies \"Geneva Minimalistic Acoustic Parameter Set (GeMAPS) Voice Research Affective Computing\" (Geneva Minimalistic Standard Parameter Set, GeMAPS v0.1b) (Eyben et al. 2015)  portion recording.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/GeMAPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the GeMAPS openSMILE feature set — GeMAPS","text":"","code":"GeMAPS(listOfFiles, beginTime = 0, endTime = 0, explicitExt = \"ocp\")"},{"path":"https://humlab-speech.github.io/superassp/reference/GeMAPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the GeMAPS openSMILE feature set — GeMAPS","text":"listOfFiles full path sound file. beginTime starting time section sound files analysed. endTime end time section sound files analysed. explicitExt file extension slice file results stored.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/GeMAPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the GeMAPS openSMILE feature set — GeMAPS","text":"list 62 acoustic values, names reported openSMILE. minimalistic acoustic parameter set contains following compact set 18 low-level descriptors (LLD), sorted parameter groups: Frequency related parameters: Pitch, logarithmic f0 semitone frequency scale,starting 27.5 Hz (semitone 0). Jitter, deviations individual consecutive f0 period lengths. Formant 1, 2, 3 frequency, centre frequency first, second, third formant Formant 1, bandwidth first formant.Energy/Amplitude related parameters: Shimmer, difference peak amplitudes consecutive f0 periods. Loudness, estimate perceived signal intensity auditory spectrum. Harmonics--noise ratio (HNR), relation energy harmonic components energy noise-like components. Spectral (balance) parameters: Alpha Ratio, ratio summed energy from50-1000 Hz 1-5 kHz Hammarberg Index, ratio strongest energy peak 0-2 kHz region strongest peak 2–5 kHz region. Spectral Slope 0-500 Hz 500-1500 Hz, linear regression slope logarithmic power spectrum within two given bands. Formant 1, 2, 3 relative energy, well ratio energy spectral harmonic peak first, second, third formant’s centre frequency energy spectral peak atF0. Harmonic difference H1-H2, ratio energy first f0 harmonic (H1) energy second f0 harmonic (H2). Harmonic difference H1-A3, ratio energy first f0harmonic (H1) energy highest harmonic third formant range (A3). analysed terms mean coefficient variation, well 20th, median (50th), 80th percentile (pitch loudness), arithmetic mean Alpha Ratio, Hammarberg Index, spectral slopes 0-500 Hz 500-1500 Hz unvoiced segments. Temporal features: rate loudness peaks, .e., number loudness peaks per second, mean length standard deviation continuously voiced regions(f0>0), mean length standard deviation unvoiced regions (f0 == 0; approximating pauses), number continuous voiced regions per second(pseudo syllable rate). Please consult (Eyben et al. 2015)  description features.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/GeMAPS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the GeMAPS openSMILE feature set — GeMAPS","text":"GeMAPS feature set consists 62 static acoustic features resulting computation various functionals low-level descriptor features, applied function using openSMILE. (Eyben et al. 2010; Jaimes et al. 2013)  acoustic feature extraction library.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/GeMAPS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the GeMAPS openSMILE feature set — GeMAPS","text":"Eyben F, Scherer KR, Schuller BW, Sundberg J, Andre E, Busso C, Devillers LY, Epps J, Laukka P, Narayanan SS, Truong KP (2015). “Geneva Minimalistic Acoustic Parameter Set (GeMAPS) Voice Research Affective Computing.” IEEE Transactions Affective Computing, 7(2), 190--202. ISSN 1949-3045, doi:10.1109/taffc.2015.2457417 . Eyben F, Wöllmer M, Schuller B (2010). Opensmile: munich versatile fast open-source audio feature extractor,  international conference. ACM. ISBN 978-1-60558-933-6, doi:10.1145/1873951.1874246 , http://dl.acm.org/citation.cfm?id=1874246. Jaimes (, Sebe N, Boujemaa N, Gatica-Perez D, Shamma DA, Worring M, Zimmermann R, Eyben F, Weninger F, Gross F, Schuller B (2013). “Recent developments openSMILE, munich open-source multimedia feature extractor.” Proceedings 21st ACM international conference Multimedia, 835--838. doi:10.1145/2502081.2502224 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/acfana.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of short-term autocorrelation function (From the 'wrassp' package) — acfana","title":"Analysis of short-term autocorrelation function (From the 'wrassp' package) — acfana","text":"acfana function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/acfana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of short-term autocorrelation function (From the 'wrassp' package) — acfana","text":"","code":"acfana(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   windowShift = 5,   windowSize = 20,   effectiveLength = TRUE,   window = \"BLACKMAN\",   analysisOrder = 0,   energyNormalization = FALSE,   lengthNormalization = FALSE,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/acfana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of short-term autocorrelation function (From the 'wrassp' package) — acfana","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default: 0 = beginning file) centerTime = <time>: set single-frame analysis analysis window centred <time> seconds;  overrules BeginTime, EndTime WindowShift options endTime = <time>: set end analysis interval <time> seconds (default: 0 = end file) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) windowSize = <dur>: set analysis window size <dur> ms; overrules EffectiveLength parameter effectiveLength make window size effective rather exact window = <type>: set analysis window function <type> (default: BLACKMAN) analysisOrder = <num>: set analysis order <num> (default: 0 = sample rate kHz + 3) energyNormalization calculate energy-normalized autocorrelation lengthNormalization calculate length-normalized autocorrelation toFile write results file (default extension .acf) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e.  directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/acfana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of short-term autocorrelation function (From the 'wrassp' package) — acfana","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/acfana.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of short-term autocorrelation function (From the 'wrassp' package) — acfana","text":"Analysis short-term autocorrelation function signals <listOFFiles>. Analysis results written file base name input file extension '.acf'. Default output SSFF binary format (track 'acf').","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/afdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the first difference of the signal (From the 'wrassp' package) — afdiff","title":"Computes the first difference of the signal (From the 'wrassp' package) — afdiff","text":"afdiff function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/afdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the first difference of the signal (From the 'wrassp' package) — afdiff","text":"","code":"afdiff(   listOfFiles = NULL,   optLogFilePath = NULL,   computeBackwardDifference = FALSE,   computeCentralDifference = FALSE,   channel = 1,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/afdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the first difference of the signal (From the 'wrassp' package) — afdiff","text":"listOfFiles vector file paths processed function optLogFilePath path option log file computeBackwardDifference compute backward difference (s'[n] = s[n] - s[n-1]) (default: forward difference s'[n] = s[n+1] - s[n]) computeCentralDifference compute central/interpolated/3-point difference channel = <num>: multi-channel input files: extract differentiate channel <num> (1 <= <num> <= 8  default: channel 1) toFile write results file (default extension .d+(extensionsOfAudioFile)) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e.  directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/afdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the first difference of the signal (From the 'wrassp' package) — afdiff","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/afdiff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the first difference of the signal (From the 'wrassp' package) — afdiff","text":"Computes first difference signal audio- formatted file(s) <listOfFiles>. differentiated signal written file base name input file extension consisting '.d', followed extension input file. format output file input file. Differentiation can improve results F0 analysis e.g. EGG signals removes DC offset, attenuates low frequency components - case central differentiation also high ones - enhances moment glottal closure.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/affilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters the audio signal (From the 'wrassp' package) — affilter","title":"Filters the audio signal (From the 'wrassp' package) — affilter","text":"affilter function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/affilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters the audio signal (From the 'wrassp' package) — affilter","text":"","code":"affilter(   listOfFiles = NULL,   optLogFilePath = NULL,   highPass = 4000,   lowPass = 0,   stopBand = 96,   transition = 250,   useIIR = FALSE,   numIIRsections = 4,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/affilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters the audio signal (From the 'wrassp' package) — affilter","text":"listOfFiles vector file paths processed function optLogFilePath path option log file highPass = <num>: set high-pass cut-frequency <num> Hz (default: 4000, high-pass filtering applied) lowPass = <num>: set low-pass cut-frequency <num> Hz (default: 0, low-pass filtering) stopBand = <num>: set stop-band attenuation <num> dB (default: 93.0 dB, minimum: 21.0 dB) transition = <num>: set width transition band <num> Hz (default: 250.0 Hz) useIIR switch default FIR IIR filter numIIRsections = <num>: set number 2nd order sections <num> (default: 4) section  adds 12dB/oct slope filter toFile write results file (default extension see details section)) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e.  directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/affilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters the audio signal (From the 'wrassp' package) — affilter","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/affilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filters the audio signal (From the 'wrassp' package) — affilter","text":"Filters audio signal <listOfFiles>. specifying high-pass /low-pass cut-frequency one four filter characteristics may selected shown table . Please note: per default high-pass filter 0 4000 Hz applied. Kaiser-window design method used compute coefficients linear-phase FIR filter unity gain pass-band. cut-frequencies (-6 dB points) filters middle transition band. filtered signal written file base name input file extension corresponding filter characteristic (see table). format output file input file.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/aperiodicities.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates aperiodicity of a speech signal — aperiodicities","title":"Estimates aperiodicity of a speech signal — aperiodicities","text":"Aperiodicity estimated using function assessing band-aperiodicities using Definitive Decomposition Derived Dirt-Cheap (D4C) algorithm (Morise 2016)  implemented WORLD vocoder (MORISE et al. 2016) . dio (Morise et al. 2010)  pitch algorithm used calculate periodic component.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/aperiodicities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates aperiodicity of a speech signal — aperiodicities","text":"","code":"aperiodicities(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 70,   maxF = 200,   voiced_voiceless_threshold = 0.01,   explicitExt = \"wap\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/aperiodicities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates aperiodicity of a speech signal — aperiodicities","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/aperiodicities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates aperiodicity of a speech signal — aperiodicities","text":"SSFF track object containing two tracks (f0 corr) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/aperiodicities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimates aperiodicity of a speech signal — aperiodicities","text":"Morise M (2016). “D4C, band-aperiodicity estimator high-quality speech synthesis.” Speech Communication, 84, 57--65. ISSN 0167-6393, doi:10.1016/j.specom.2016.09.001 . Morise M, Kawahara H, Nishiura T (2010). “Rapid F0 estimation high-SNR speech based fundamental component extraction.” Trans. IEICEJ, 93, 109--117. MORISE M, YOKOMORI F, OZAWA K (2016). “WORLD: Vocoder-Based High-Quality Speech Synthesis System Real-Time Applications.” IEICE Transactions Information Systems, E99.D(7), 1877--1884. ISSN 0916-8532, doi:10.1587/transinf.2015edp7457 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cepstrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Short-term cepstral analysis (From the 'wrassp' package) — cepstrum","title":"Short-term cepstral analysis (From the 'wrassp' package) — cepstrum","text":"calculate cepstral coefficients using libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cepstrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short-term cepstral analysis (From the 'wrassp' package) — cepstrum","text":"","code":"cepstrum(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   resolution = 40,   fftLength = 0,   windowShift = 5,   window = \"BLACKMAN\",   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/cepstrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Short-term cepstral analysis (From the 'wrassp' package) — cepstrum","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default: begin data) centerTime = <time>: set single-frame analysis analysis window centred <time> seconds; overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default: end data) resolution = <freq>: set FFT length smallest value results frequency resolution <freq> Hz better (default: 40.0) fftLength = <num>: set FFT length <num> points (overrules default 'resolution' option) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) window = <type>: set analysis window function <type> (default: BLACKMAN) toFile write results file (default extension depends ) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cepstrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Short-term cepstral analysis (From the 'wrassp' package) — cepstrum","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cepstrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Short-term cepstral analysis (From the 'wrassp' package) — cepstrum","text":"Short-term cepstral analysis signal <listOfFiles> using Fast Fourier Transform. number coefficients per output record also equal FFT length / 2 + 1 (.e. non-mirrored). Analysis results written file base name input file extension '.cep'. Default output SSFF format 'cep' track name.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/clear_dsp_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Tear down a DSP environment — clear_dsp_environment","title":"Tear down a DSP environment — clear_dsp_environment","text":"function remove environment created process specific speech signal file signalFileFullPath. signal file path given function make_dsp_environment function ensure correct environment removed.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/clear_dsp_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tear down a DSP environment — clear_dsp_environment","text":"","code":"clear_dsp_environment(dsp_environment_path)"},{"path":"https://humlab-speech.github.io/superassp/reference/clear_dsp_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tear down a DSP environment — clear_dsp_environment","text":"dsp_environment_path full path directory set storing sound files processing.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/clear_dsp_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tear down a DSP environment — clear_dsp_environment","text":"function returns FALSE function unable remove environment. function returns TRUE, environment associated speech signal file successfully removed, exist first place.means user can reasonably sure case clashing environments Praat run function returns TRUE.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/crepe.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","title":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","text":"CREPE (Kim et al. 2018)  applies deep convolutional neural network directly time-domain waveform find fundamental frequency speech signal. Two versions models trained, one smaller yielding quicker results, full model can considerably computationally intensive apply.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/crepe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","text":"","code":"crepe(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   windowSize = 15,   minF = 70,   maxF = 200,   voicing.threshold = 0.21,   silence.threshold = -60,   model = c(\"tiny\", \"full\"),   explicitExt = \"crp\",   outputDirectory = NULL,   toFile = TRUE,   conda.env = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/crepe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","text":"listOfFiles vector file paths wav files. beginTime (implemented) start time section sound file processed. endTime (implemented) end time section sound file processed. windowShift measurement interval (frame duration), seconds. windowSize analysis window length (ms). minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. voicing.threshold Voice/unvoiced threshold. Default 0.21. silence.threshold Frames contain amplitudes threshold (relative global maximum amplitude), probably silent. model Use fast (\"tiny\") model, complete (\"full\") model find pitch. complete model take approximately 9-11 times longer process file. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. conda.env name conda environment Python required packages stored. Please make sure know change . Defaults NULL, means default enviroment environment set RETICULATE_PYTHON environment variable used.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/crepe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","text":"SSFF track object containing two tracks (f0 periodicity) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/crepe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","text":"T","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/crepe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute pitch and periodicity using the CREPE pitch tracker — crepe","text":"Kim JW, Salamon J, Li P, Bello JP (2018). “Crepe: Convolutional Representation Pitch Estimation.” 2018 IEEE International Conference Acoustics, Speech Signal Processing (ICASSP), 00, 161--165. doi:10.1109/icassp.2018.8461329 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cs_wrap_praat_script.html","id":null,"dir":"Reference","previous_headings":"","what":"A concurrency safe way to wrap a Praat script into an R function — cs_wrap_praat_script","title":"A concurrency safe way to wrap a Praat script into an R function — cs_wrap_praat_script","text":"function extension tjm.praat::wrap_praat_script function wraps Praat script R function, extra demand specify directory Praat script stored execution. means rather multiple  Praat script executing temporary directory (case using tjm.praat::wrap_praat_script, environment expected created using make_dsp_environment already, supplied function via directory argument. additional sound files batches sound files available particular instance Praat DSP Praat functions can called concurrently.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cs_wrap_praat_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A concurrency safe way to wrap a Praat script into an R function — cs_wrap_praat_script","text":"","code":"cs_wrap_praat_script(   praat_location,   script_code_to_run,   directory,   return = c(\"last-argument\", \"info-window\") )"},{"path":"https://humlab-speech.github.io/superassp/reference/cs_wrap_praat_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A concurrency safe way to wrap a Praat script into an R function — cs_wrap_praat_script","text":"praat_location path Praat executable script_code_to_run Praat script run directory full path directory set make_dsp_environment return value return. \"last-argument\" returns last argument Praat script. \"info-window\" returns contents Praat Info Window.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cs_wrap_praat_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A concurrency safe way to wrap a Praat script into an R function — cs_wrap_praat_script","text":"see return argument","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cssSpectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cepstral smoothed version of 'dftSpectrum' (From the 'wrassp' package) — cssSpectrum","title":"Cepstral smoothed version of 'dftSpectrum' (From the 'wrassp' package) — cssSpectrum","text":"calculate cepstrally smoothed spectrum using libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cssSpectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cepstral smoothed version of 'dftSpectrum' (From the 'wrassp' package) — cssSpectrum","text":"","code":"cssSpectrum(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   resolution = 40,   fftLength = 0,   windowShift = 5,   window = \"BLACKMAN\",   numCeps = 0,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/cssSpectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cepstral smoothed version of 'dftSpectrum' (From the 'wrassp' package) — cssSpectrum","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default: begin data) centerTime = <time>: set single-frame analysis analysis window centred <time> seconds; overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default: end data) resolution = <freq>: set FFT length smallest value results frequency resolution <freq> Hz better (default: 40.0) fftLength = <num>: set FFT length <num> points (overrules default 'resolution' option) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) window = <type>: set analysis window function <type> (default: BLACKMAN) numCeps = <num>: set number cepstral coefficients used <num> (default: sampling rate kHz + 1; minimum: 2) toFile write results file (default extension depends ) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cssSpectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cepstral smoothed version of 'dftSpectrum' (From the 'wrassp' package) — cssSpectrum","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/cssSpectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cepstral smoothed version of 'dftSpectrum' (From the 'wrassp' package) — cssSpectrum","text":"Short-term spectral analysis signal <listOfFiles> using Fast Fourier Transform cepstral smoothing. Analysis results written file base name input file '.css.' extension. Default output SSFF format 'css' lower case track name.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/dftSpectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Short-term DFT spectral analysis (From the 'wrassp' package) — dftSpectrum","title":"Short-term DFT spectral analysis (From the 'wrassp' package) — dftSpectrum","text":"DFT spectrum function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dftSpectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short-term DFT spectral analysis (From the 'wrassp' package) — dftSpectrum","text":"","code":"dftSpectrum(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   resolution = 40,   fftLength = 0,   windowShift = 5,   window = \"BLACKMAN\",   bandwidth = 0,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/dftSpectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Short-term DFT spectral analysis (From the 'wrassp' package) — dftSpectrum","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default: begin data) centerTime = <time>: set single-frame analysis analysis window centred <time> seconds; overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default: end data) resolution = <freq>: set FFT length smallest value results frequency resolution <freq> Hz better (default: 40.0) fftLength = <num>: set FFT length <num> points (overrules default 'resolution' option) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) window = <type>: set analysis window function <type> (default: BLACKMAN) bandwidth = <freq>: set effective analysis bandwidth <freq> Hz (default: 0, yielding smallest possible value given length FFT) toFile write results file (default extension depends ) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dftSpectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Short-term DFT spectral analysis (From the 'wrassp' package) — dftSpectrum","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dftSpectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Short-term DFT spectral analysis (From the 'wrassp' package) — dftSpectrum","text":"Short-term spectral analysis signal <listOfFiles> using Fast Fourier Transform. default calculate unsmoothed narrow-band spectrum size analysis window equal length FFT. output FFT converted power spectrum dB 0 Hz including Nyquist rate. Analysis results written file base name input file spectrum type lower case extension (e.g. '.dft'). Default output SSFF format spectrum type lower case track name.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/differentiate.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivation of SSFF track objects — differentiate","title":"Derivation of SSFF track objects — differentiate","text":"function takes SSFF object file computes orderth derivative tracks . user may also specify lag differentiation. lag=1, ordinary differences consecutive values computed. lag=2, difference 1st 3rd value returned, . user may specify order differentiation , thereby cause differentiation conducted multiple iterations.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/differentiate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivation of SSFF track objects — differentiate","text":"","code":"differentiate(   inSSFF,   order = 1,   onlyTracks = NULL,   padLeft = TRUE,   toFile = TRUE,   explicitExt = NULL,   overwrite = FALSE )"},{"path":"https://humlab-speech.github.io/superassp/reference/differentiate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivation of SSFF track objects — differentiate","text":"inSSFF SSFF object, full path file contains SSFF object may read wrassp::read.AsspDataObj. order number iterations vector differentiated. first order differentiation gives size changes consecutive values (indicated lag). second order differentiation gives rate change, . onlyTracks differentiate certain tracks, leave others . Defaults process tracks. padLeft initial zeros inserted vector left? toFile resulting SSFF object written file, returned? explicitExt default, character \"d\" prepended file name suffix writing output file. user can also specify explicit extension used instead. overwrite existing file overwritten writing output?","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/differentiate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivation of SSFF track objects — differentiate","text":"function return SSFF object toFile TRUE. Otherwise, nothing returned.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/differentiate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derivation of SSFF track objects — differentiate","text":"Differentiation always results loss data, user may specify align differentiation output. Initial zero padding values inserted vector length input output always . padLeft=TRUE (default) initial zero values inserted tracks differentiation result aligns time occurrence value change. , lag=2 value output vector indicates place input vector change happened indicated size compared value two positions back vector. padLeft=FALSE lag=2 value indicates change occurred looking two positions forward vector. likely unusual use case, therefore default behavior. Padding signal zeros performed iterations differentiation performed completely, padding zeros therefore never differentiated .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute f0 using the Harvest algorithm — dio","title":"Compute f0 using the Harvest algorithm — dio","text":"DIO algorithm (Morise et al. 2010)  developed WORLD vocoder (MORISE et al. 2016)  aims provide fast estimate f0 contour.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute f0 using the Harvest algorithm — dio","text":"","code":"dio(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 70,   maxF = 200,   voiced_voiceless_threshold = 0.01,   explicitExt = \"wd0\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/dio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute f0 using the Harvest algorithm — dio","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. voiced.voiceless.threshold Threshold voiced/unvoiced decision. Can value >= 0, 0.02 0.2 reasonable range. Lower values cause frames considered unvoiced (extreme case threshold=0, almost frames unvoiced).","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute f0 using the Harvest algorithm — dio","text":"SSFF track object containing two tracks (f0 corr) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/dio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute f0 using the Harvest algorithm — dio","text":"Morise M, Kawahara H, Nishiura T (2010). “Rapid F0 estimation high-SNR speech based fundamental component extraction.” Trans. IEICEJ, 93, 109--117. MORISE M, YOKOMORI F, OZAWA K (2016). “WORLD: Vocoder-Based High-Quality Speech Synthesis System Real-Time Applications.” IEICE Transactions Information Systems, E99.D(7), 1877--1884. ISSN 0916-8532, doi:10.1587/transinf.2015edp7457 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/eGeMAPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","title":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","text":"function applies extended version \"Geneva Minimalistic Acoustic Parameter Set (eGeMAPS) Voice Research Affective Computing\" (Extended Geneva Minimalistic Standard Parameter Set, eGeMAPS v02) (Eyben et al. 2015)  portion recording.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/eGeMAPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","text":"","code":"eGeMAPS(listOfFiles, beginTime = 0, endTime = 0, explicitExt = \"ocp\")"},{"path":"https://humlab-speech.github.io/superassp/reference/eGeMAPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","text":"listOfFiles full path sound file. beginTime starting time section sound files analysed. endTime end time section sound files analysed. explicitExt file extension slice file results stored.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/eGeMAPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","text":"list 88 acoustic values, names reported openSMILE. extendedacoustic parameter set contains following compact set 18 low-level descriptors (LLD), sorted parameter groups: Frequency related parameters: Pitch, logarithmic f0 semitone frequency scale,starting 27.5 Hz (semitone 0). Jitter, deviations individual consecutive f0 period lengths. Formant 1, 2, 3 frequency, centre frequency first, second, third formant Formant 1, bandwidth first formant.Energy/Amplitude related parameters: Shimmer, difference peak amplitudes consecutive f0 periods. Loudness, estimate perceived signal intensity auditory spectrum. Harmonics--noise ratio (HNR), relation energy harmonic components energy noise-like components. Formant 2-3 bandwidth Spectral (balance) parameters: Alpha Ratio, ratio summed energy from50-1000 Hz 1-5 kHz Hammarberg Index, ratio strongest energy peak 0-2 kHz region strongest peak 2–5 kHz region. Spectral Slope 0-500 Hz 500-1500 Hz, linear regression slope logarithmic power spectrum within two given bands. Formant 1, 2, 3 relative energy, well ratio energy spectral harmonic peak first, second, third formant’s centre frequency energy spectral peak atF0. Harmonic difference H1-H2, ratio energy first f0 harmonic (H1) energy second f0 harmonic (H2). Harmonic difference H1-A3, ratio energy first f0harmonic (H1) energy highest harmonic third formant range (A3). MFCC 1-4 Mel-Frequency Cepstral Coefficients 1-4. Spectral flux difference spectra two consecutive frames. analysed terms mean coefficient variation, well 20th, median (50th), 80th percentile (pitch loudness), arithmetic mean Alpha Ratio, Hammarberg Index, spectral slopes 0-500 Hz 500-1500 Hz unvoiced segments, equivalent sound level. Temporal features: rate loudness peaks, .e., number loudness peaks per second, mean length standard deviation continuously voiced regions(f0>0), mean length standard deviation unvoiced regions (f0 == 0; approximating pauses), number continuous voiced regions per second(pseudo syllable rate). Please consult (Eyben et al. 2015)  description features.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/eGeMAPS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","text":"GeMAPS feature set consists 88 static acoustic features resulting computation various functionals low-level descriptor features, applied function using openSMILE. (Eyben et al. 2010; Jaimes et al. 2013)  acoustic feature extraction library.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/eGeMAPS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the eGeMAPS openSMILE feature set — eGeMAPS","text":"Eyben F, Scherer KR, Schuller BW, Sundberg J, Andre E, Busso C, Devillers LY, Epps J, Laukka P, Narayanan SS, Truong KP (2015). “Geneva Minimalistic Acoustic Parameter Set (GeMAPS) Voice Research Affective Computing.” IEEE Transactions Affective Computing, 7(2), 190--202. ISSN 1949-3045, doi:10.1109/taffc.2015.2457417 . Eyben F, Wöllmer M, Schuller B (2010). Opensmile: munich versatile fast open-source audio feature extractor,  international conference. ACM. ISBN 978-1-60558-933-6, doi:10.1145/1873951.1874246 , http://dl.acm.org/citation.cfm?id=1874246. Jaimes (, Sebe N, Boujemaa N, Gatica-Perez D, Shamma DA, Worring M, Zimmermann R, Eyben F, Weninger F, Gross F, Schuller B (2013). “Recent developments openSMILE, munich open-source multimedia feature extractor.” Proceedings 21st ACM international conference Multimedia, 835--838. doi:10.1145/2502081.2502224 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/emobase.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the emobase openSMILE feature set — emobase","title":"Compute the emobase openSMILE feature set — emobase","text":"function applies emobase openSMILE (Eyben et al. 2010)  configuration compute 988 acoustic features reasoned part perception emotion.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/emobase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the emobase openSMILE feature set — emobase","text":"","code":"emobase(listOfFiles, beginTime = 0, endTime = 0, explicitExt = \"ocp\")"},{"path":"https://humlab-speech.github.io/superassp/reference/emobase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the emobase openSMILE feature set — emobase","text":"listOfFiles full path sound file. beginTime starting time section sound files analysed. endTime end time section sound files analysed. explicitExt file extension slice file results stored.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/emobase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the emobase openSMILE feature set — emobase","text":"list 988 acoustic values, names reported openSMILE.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/emobase.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the emobase openSMILE feature set — emobase","text":"Eyben F, Wöllmer M, Schuller B (2010). Opensmile: munich versatile fast open-source audio feature extractor,  international conference. ACM. ISBN 978-1-60558-933-6, doi:10.1145/1873951.1874246 , http://dl.acm.org/citation.cfm?id=1874246.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Formant estimation (From the 'wrassp' package) — forest","title":"Formant estimation (From the 'wrassp' package) — forest","text":"forest function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formant estimation (From the 'wrassp' package) — forest","text":"","code":"forest(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   endTime = 0,   windowShift = 5,   windowSize = 20,   effectiveLength = TRUE,   nominalF1 = 500,   gender = \"m\",   estimate = FALSE,   order = 0,   incrOrder = 0,   numFormants = 4,   window = \"BLACKMAN\",   preemphasis = -0.8,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formant estimation (From the 'wrassp' package) — forest","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default = 0: begin data) endTime = <time>:  set end analysis interval <time> seconds (default = 0: end data) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) windowSize = <dur>: set analysis window size <dur> ms (default: 30.0) effectiveLength make window size effective rather exact nominalF1 = <freq>: set nominal F1 frequency <freq> Hz (default: 500.0 Hz) gender = <code>: set gender specific parameters  <code> = f[emale], m[ale] u[nknown] (<code>=f: eff. window length = 12.5 ms nominal F1 = 560.0 Hz) estimate insert rough frequency estimates missing formants (default: frequency set zero) order decrease default order 2 (one resonance less) incrOrder increase default order 2 (one resonance ) numFormants = <num>: set number formants <num> (default: 4;  maximum: 8 half LP order) window = <type>: set analysis window function <type> (default: BLACKMAN) preemphasis = <val>: set pre-emphasis factor <val> (-1 <= val <= 0)  (default: dependent sample rate nominal F1) toFile write results file (default extension .fms) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e.  directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formant estimation (From the 'wrassp' package) — forest","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/forest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formant estimation (From the 'wrassp' package) — forest","text":"Formant estimation signal(s) <listOfFiles>. Raw resonance frequency bandwidth values obtained root-solving Linear Prediction polynomial autocorrelation method Split-Levinson-Algorithm (SLA). Resonances classified formants using -called Pisarenko frequencies (-product SLA) formant frequency range table derived nominal F1 frequency. latter may increased 12% female voices (see NominalF1 Gender options). Formant estimates written file base name input file extension '.fms'. Default output SSFF binary format (tracks 'fm' 'bw')","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/get_definedtracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available tracks for a function or an SSFF file — get_definedtracks","title":"Get available tracks for a function or an SSFF file — get_definedtracks","text":"Get available tracks function SSFF file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_definedtracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available tracks for a function or an SSFF file — get_definedtracks","text":"","code":"get_definedtracks(x)"},{"path":"https://humlab-speech.github.io/superassp/reference/get_definedtracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available tracks for a function or an SSFF file — get_definedtracks","text":"x name function defined output trackdata, full path file can read using wrassp::read.AsspDataObj.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_definedtracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available tracks for a function or an SSFF file — get_definedtracks","text":"vector tracks function defined return, contained within file.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_definedtracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available tracks for a function or an SSFF file — get_definedtracks","text":"","code":"get_definedtracks(\"forest\") #> [1] \"fm\" \"bw\" get_definedtracks(\"praat_formant_burg\") #> [1] \"F\" \"B\" \"L\""},{"path":"https://humlab-speech.github.io/superassp/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the (default) extension for an SSFF producing function or a signal file — get_extension","title":"Get the (default) extension for an SSFF producing function or a signal file — get_extension","text":"Get (default) extension SSFF producing function signal file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the (default) extension for an SSFF producing function or a signal file — get_extension","text":"","code":"get_extension(x)"},{"path":"https://humlab-speech.github.io/superassp/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the (default) extension for an SSFF producing function or a signal file — get_extension","text":"x name function defined output trackdata, full path file can read using wrassp::read.AsspDataObj.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the (default) extension for an SSFF producing function or a signal file — get_extension","text":"string indicating default file extension SSFF generating function, file extension signal file.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the (default) extension for an SSFF producing function or a signal file — get_extension","text":"","code":"get_extension(\"forest\") #> [1] \"fms\" get_extension(\"praat_formant_burg\") #> [1] \"pfm\""},{"path":"https://humlab-speech.github.io/superassp/reference/get_outputType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the return format of a wrassp/superassp speech signal processing function — get_outputType","title":"Get the return format of a wrassp/superassp speech signal processing function — get_outputType","text":"Speech signal processing functions superassp may return SSFF track one columns, simple, nested list. function may used learn output type specific function.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_outputType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the return format of a wrassp/superassp speech signal processing function — get_outputType","text":"","code":"get_outputType(x, package = \"superassp\")"},{"path":"https://humlab-speech.github.io/superassp/reference/get_outputType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the return format of a wrassp/superassp speech signal processing function — get_outputType","text":"x name speech signal processing function defined superassp wrassp packages. package name package function defined.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_outputType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the return format of a wrassp/superassp speech signal processing function — get_outputType","text":"Either \"SSFF\" \"list\".","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_outputType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the return format of a wrassp/superassp speech signal processing function — get_outputType","text":"","code":"get_outputType(\"forest\") #> [1] \"SSFF\" get_outputType(\"praat_avqi\") #> [1] \"list\" get_outputType(\"praat_formant_burg\") #> [1] \"SSFF\""},{"path":"https://humlab-speech.github.io/superassp/reference/get_praat.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function for getting the full path of the Praat executable. — get_praat","title":"Utility function for getting the full path of the Praat executable. — get_praat","text":"function checks system variables deduces Praat installed. OSX platform (Darwin) Praat app assumed exist Applications folder, actual binary inside application package used. OSX, function search default search paths executables set OS. explicit path given, function just check whether executable actualy present .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_praat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function for getting the full path of the Praat executable. — get_praat","text":"","code":"get_praat(praat_path = NULL)"},{"path":"https://humlab-speech.github.io/superassp/reference/get_praat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function for getting the full path of the Praat executable. — get_praat","text":"praat_path character string containing path executable function able find (executable function able verify existance ), NULL Praat executable found verified.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/get_praat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function for getting the full path of the Praat executable. — get_praat","text":"character string containing path executable function able find (executable function able verify existance ), NULL Praat executable found verified.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harmonics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the harmonic frequency structure from f0 measurements — harmonics","title":"Compute the harmonic frequency structure from f0 measurements — harmonics","text":"function takes pre-computed f0 track derive n harmonic tracks vector f0 values now matrix n columns. column encode nth harmonic values.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harmonics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the harmonic frequency structure from f0 measurements — harmonics","text":"","code":"harmonics(track, column = \"f0\", n = 5, explicitExt = \"har\", toFile = TRUE)"},{"path":"https://humlab-speech.github.io/superassp/reference/harmonics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the harmonic frequency structure from f0 measurements — harmonics","text":"track f0 track, either SSFF object name SSFF formatted file. recommended column name column use f0 track. n number harmonics compute. explicitExt output file extension. toFile boolean;SSFF track returned stored disc?","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harmonics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the harmonic frequency structure from f0 measurements — harmonics","text":"SSFF track object, required. NULL otherwise.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harmonics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the harmonic frequency structure from f0 measurements — harmonics","text":"stored harmonic frequencies simply multiples fundamental frequency (f0) track, derived independently speech signal. Therefore, errors frequency tracking f0 signal carried tracks. primary use case track estimates harmonic frequencies visualize harmonic frequency (nf~0 ) harmonic amplitude ( L~1-n ) .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harvest.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute f0 using the Harvest algorithm — harvest","title":"Compute f0 using the Harvest algorithm — harvest","text":"Harvest algorithm (Morise 2017)  developed WORLD vocoder (MORISE et al. 2016)  aims obtain reliable F0 contour reduce erroneously identified voice frames.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harvest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute f0 using the Harvest algorithm — harvest","text":"","code":"harvest(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 70,   maxF = 200,   explicitExt = \"hf0\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/harvest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute f0 using the Harvest algorithm — harvest","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harvest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute f0 using the Harvest algorithm — harvest","text":"SSFF track object containing two tracks (f0 corr) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harvest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute f0 using the Harvest algorithm — harvest","text":"algorithm consists two steps. first step, algorithm uses fundamental component extraction many band-pass filters different center frequencies obtains basic f0 candidates filtered signals. second step, basic f0 candidates refined scored using instantaneous frequency, several f0 candidates frame estimated.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/harvest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute f0 using the Harvest algorithm — harvest","text":"Morise M (2017). “Harvest: High-Performance Fundamental Frequency Estimator Speech Signals.” Interspeech 2017, 2321--2325. doi:10.21437/interspeech.2017-68 . MORISE M, YOKOMORI F, OZAWA K (2016). “WORLD: Vocoder-Based High-Quality Speech Synthesis System Real-Time Applications.” IEICE Transactions Information Systems, E99.D(7), 1877--1884. ISSN 0916-8532, doi:10.1587/transinf.2015edp7457 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/have_praat.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple check of a presence of a Praat executable — have_praat","title":"A simple check of a presence of a Praat executable — have_praat","text":"simple check presence Praat executable","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/have_praat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple check of a presence of a Praat executable — have_praat","text":"","code":"have_praat(praat_path = NULL)"},{"path":"https://humlab-speech.github.io/superassp/reference/have_praat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple check of a presence of a Praat executable — have_praat","text":"praat_path character string containing path executable function able find (executable function able verify existance ), NULL Praat executable found verified.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/have_praat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simple check of a presence of a Praat executable — have_praat","text":"boolean indicating whether Praat executable found .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/kaldi_pitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","title":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","text":"algorithm used version RAPT algorithm considers voicing also voiceless frames conputes Normalized Cross Correlation Function (NCCF) can used estimate probability voicing (Ghahremani et al. 2014) .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/kaldi_pitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","text":"","code":"kaldi_pitch(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   windowSize = 25,   minF = 70,   maxF = 200,   softMinF0 = 10,   voiced_voiceless_cost = 0.1,   owpass_cutoff = 1000,   resample_frequency = 4000,   deltaChange = 0.005,   nccfBallast = 7000,   lowpass_cutoff = 1000,   lowpass_filter_width = 1,   upsample_filter_width = 5,   max_frames_latency = 0,   frames_per_chunk = 0,   simulate_first_pass_online = FALSE,   recompute_frame = 500,   snip_edges = TRUE,   explicitExt = \"kap\",   outputDirectory = NULL,   toFile = TRUE,   conda.env = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/kaldi_pitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. resample_frequency Frequency -sample signal . Must twice lowpass_cutoff. (default: 4000) lowpass_cutoff Cutoff frequency LowPass filter (Hz) (default: 1000) lowpass_filter_width Integer determines filter width lowpass filter, gives sharper filter. (default: 1) max_frames_latency Maximum number frames latency allow pitch tracking introduce feature processing (affects output frames_per_chunk > 0 simulate_first_pass_online=TRUE) (default: 0) frames_per_chunk number frames used energy normalization. (default: 0) simulate_first_pass_online true, function output features correspond online decoder see first pass decoding – final version features, default. (default: FALSE) Relevant frames_per_chunk > 0. recompute_frame relevant compatibility online pitch extraction. non-critical parameter; frame recompute forward pointers, revising estimate signal energy. Relevant frames_per_chunk > 0. (default: 500) snip_edges set false, incomplete frames near ending edge won’t snipped, number frames file size divided windowShift. makes different types features give number frames. (default: True) explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. conda.env name conda environment Python required packages stored. Please make sure know change . soft_min_f0 (float, optional) – Minimum f0, applied soft way, must exceed min-f0 (default: 10.0) penalty_factor Cost factor fO change. (default: 0.1) delta_pitch Smallest relative change pitch algorithm measures. (default: 0.005) nccf_ballast Increasing factor reduces NCCF quiet frames (default: 7000) psample_filter_width Integer determines filter width upsampling NCCF. (default: 5)","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/kaldi_pitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","text":"SSFF track object containing two tracks (f0 nccf) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/kaldi_pitch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","text":"function calls torchaudio (Yang et al. 2021)  library pitch estimates therefore relies present properly set python environment work. Please refer torchaudio manual information.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/kaldi_pitch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate pitch using the Kaldi modifies version of RAPT — kaldi_pitch","text":"Ghahremani P, BabaAli B, Povey D, Riedhammer K, Trmal J, Khudanpur S (2014). “Pitch Extraction Algorithm Tuned Automatic Speech Recognition.” 2014 IEEE International Conference Acoustics, Speech Signal Processing (ICASSP), 2494--2498. doi:10.1109/icassp.2014.6854049 . Yang Y, Hira M, Ni Z, Chourdia , Astafurov , Chen C, Yeh C, Puhrsch C, Pollack D, Genzel D, Greenberg D, Yang EZ, Lian J, Mahadeokar J, Hwang J, Chen J, Goldsborough P, Roy P, Narenthiran S, Watanabe S, Chintala S, Quenneville-Bélair V, Shi Y (2021). “TorchAudio: Building Blocks Audio Speech Processing.” arXiv preprint arXiv:2110.15018.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/ksvF0.html","id":null,"dir":"Reference","previous_headings":"","what":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","title":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","text":"ksvF0 function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ksvF0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","text":"","code":"ksvF0(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   endTime = 0,   windowShift = 5,   gender = \"u\",   maxF = 600,   minF = 50,   minAmp = 50,   maxZCR = 3000,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/ksvF0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default = 0: begin data) endTime set end analysis interval <time> seconds (default = 0: end data) windowShift = <dur>: set frame shift <dur> ms (default: 5.0) gender = <code>  set gender-specific F0 ranges; <code> may : \"f[emale]\" (80.0 - 640.0 Hz) \"m[ale]\" (50.0 - 400.0 Hz) \"u[nknown]\" (default; 50.0 - 600.0 Hz) maxF = <freq>: set maximum F0 value <freq> Hz (default: 500.0) minF = <freq>: set minimum F0 value <freq> Hz (default: 50.0) minAmp = <amp>: set amplitude threshold voiced samples <amp> (default: 100) maxZCR maximum zero crossing rate Hz (voicing detection) toFile write results file (default extension .f0) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ksvF0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ksvF0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","text":"F0 analysis signal <listOfFiles> using  K. Schaefer-Vincent periodicity detection algorithm. Analysis results written file base name input file extension '.f0'. Default output SSFF binary format (track 'F0'). Optionally, location type signal extrema F0 data based, may stored label file. name file consist base name F0 file extension '.prd'.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ksvF0.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"F0 analysis of the signal (From the 'wrassp' package) — ksvF0","text":"Schaefer-Vincent K (1983) Pitch period detection chaining: method evaluation. Phonetica 1983, Vol 40, pp. 177-202","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/lpsSpectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Predictive smoothed version of 'dftSpectrum' (From the 'wrassp' package) — lpsSpectrum","title":"Linear Predictive smoothed version of 'dftSpectrum' (From the 'wrassp' package) — lpsSpectrum","text":"Calculate Linear Prediction smoothed spectrum using libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/lpsSpectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Predictive smoothed version of 'dftSpectrum' (From the 'wrassp' package) — lpsSpectrum","text":"","code":"lpsSpectrum(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   resolution = 40,   fftLength = 0,   windowSize = 20,   windowShift = 5,   window = \"BLACKMAN\",   order = 0,   preemphasis = -0.95,   deemphasize = TRUE,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/lpsSpectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Predictive smoothed version of 'dftSpectrum' (From the 'wrassp' package) — lpsSpectrum","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default: begin data) centerTime = <time>: set single-frame analysis analysis window centred <time> seconds; overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default: end data) resolution = <freq>: set FFT length smallest value results frequency resolution <freq> Hz better (default: 40.0) fftLength = <num>: set FFT length <num> points (overrules default 'resolution' option) windowSize = <dur>: set effective analysis window size <dur> ms windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) window = <type>: set analysis window function <type> (default: BLACKMAN) order = <num>: set prediction order <num> (default: sampling rate kHz + 3) preemphasis = <val>: set pre-emphasis factor <val> (default: -0.95) deemphasize (default: undo spectral tilt due pre-emphasis used LP analysis, .e. TRUE) toFile write results file (default extension depends ) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/lpsSpectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Predictive smoothed version of 'dftSpectrum' (From the 'wrassp' package) — lpsSpectrum","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/lpsSpectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Predictive smoothed version of 'dftSpectrum' (From the 'wrassp' package) — lpsSpectrum","text":"Short-term spectral analysis signal <listOfFiles> using Fast Fourier Transform linear predictive smoothing. Analysis results written file base name input file spectrum type lower case extension (.e. '.lps'). Default output SSFF format spectrum type lower case track name.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/make_dsp_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"A utility function to make a concurrency-safe DSP environment — make_dsp_environment","title":"A utility function to make a concurrency-safe DSP environment — make_dsp_environment","text":"function make unique directory associated particular speech signal file, unique ans safe calling Praat DSP functions concurrently.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/make_dsp_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A utility function to make a concurrency-safe DSP environment — make_dsp_environment","text":"","code":"make_dsp_environment()"},{"path":"https://humlab-speech.github.io/superassp/reference/make_dsp_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A utility function to make a concurrency-safe DSP environment — make_dsp_environment","text":"full path constructed directory (string).","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/make_dsp_environment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A utility function to make a concurrency-safe DSP environment — make_dsp_environment","text":"Teardown environment done using clear_dsp_environment function, called using signal file name. file path used \"\" creating concurrency safe environment, user make sure file path normalization prior using function clear_dsp_environment unique identifier environment constructed tore ensured .","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/mhsF0.html","id":null,"dir":"Reference","previous_headings":"","what":"Pitch analysis of the speech signal using Michel's (M)odified (H)armonic (S)ieve algorithm (From the 'wrassp' package) — mhsF0","title":"Pitch analysis of the speech signal using Michel's (M)odified (H)armonic (S)ieve algorithm (From the 'wrassp' package) — mhsF0","text":"mhsF0 function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/mhsF0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pitch analysis of the speech signal using Michel's (M)odified (H)armonic (S)ieve algorithm (From the 'wrassp' package) — mhsF0","text":"","code":"mhsF0(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   windowShift = 5,   gender = \"u\",   maxF = 600,   minF = 50,   minAmp = 50,   minAC1 = 0.25,   minRMS = 18,   maxZCR = 3000,   minProb = 0.52,   plainSpectrum = FALSE,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/mhsF0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pitch analysis of the speech signal using Michel's (M)odified (H)armonic (S)ieve algorithm (From the 'wrassp' package) — mhsF0","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default = 0: begin file) centerTime = <time>:  set single-frame analysis analysis  window centred <time> seconds; overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default = 0: end file) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) gender = <code>  set gender-specific pitch ranges; <code> may : \"f[emale]\" (80.0 - 600.0 Hz) \"m[ale]\" (50.0 - 375.0 Hz) \"u[nknown]\" (default; 50.0 - 600.0 Hz) maxF = <freq>: set maximum pitch value <freq> Hz (default: 500.0) minF = <freq>:  set minimum pitch value <freq> Hz (default: 50.0  minimum: 25.0) minAmp = <amp>:  minimum signal amplitude (default: 50) minAC1 = <freq>: minimum 1st correlation coefficient (default: 0.250) minRMS = <num>:  minimum RMS amplitude dB (default: 18.0) maxZCR = <freq>: maximum zero crossing rate Hz (default: 3000) minProb = <num>: minimum quality value F0 fit (default: 0.520) plainSpectrum use plain rather masked power spectrum toFile write results file (default extension .pit) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/mhsF0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pitch analysis of the speech signal using Michel's (M)odified (H)armonic (S)ieve algorithm (From the 'wrassp' package) — mhsF0","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/mhsF0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pitch analysis of the speech signal using Michel's (M)odified (H)armonic (S)ieve algorithm (From the 'wrassp' package) — mhsF0","text":"Pitch analysis speech signal <listOfFile> using Michel's/Modified Harmonic Sieve algorithm. Analysis results written file base name input file extension '.pit'. Default output SSFF binary format (track 'pitch').","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/praat_avqi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","title":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","text":"function computes Acoustic Voice Quality Index (AVQI) set continuous speech sustained vowel samples. Praat used compute AVQI result therefore identical code published (Latoszek et al. 2019) . user may provide multiple continuous speech sustained vowel samples speaker, concatenates together computing AVQI value speaker recording session.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_avqi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","text":"","code":"praat_avqi(   svDF,   csDF,   min.sv = 1000,   speaker.name = NULL,   speaker.ID = speaker.name,   speaker.dob = NULL,   session.datetime = NULL,   pdf.path = NULL,   simple.output = FALSE,   overwrite.pdfs = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_avqi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","text":"svDF data.frame containing columns \"absolute_file_path\",\"start\", \"end\". row contain full path sound file, \"start\" \"end\" points sustained vowel sound file. multiple sustained vowels concatenated together compute AVQI, therefore important user start end points indeed inside sustained vowel influence results introducing unvoiced frames. csDF data.frame containing columns \"absolute_file_path\",\"start\", \"end\". row contain full path sound file, \"start\" \"end\" points portion continuous speech sound file. Multiple portions speech concatenated together compute AVQI, therefore important user start end points indeed inside portion produced speech influence results introducing unvoiced frames. min.sv minimal continuous vowel duration required make accurate measurements (milliseconds). total duration sustained vowels svDF tibble smaller , function produce error quit processing. Defaults 1000 ms (1 second) rarely shorter . speaker.name name speaker. used produced PDF output files. speaker.ID used identify output returned list PDF output, therefore either ID speaker Speaker + session compilation. speaker.dob date birth speaker. provided, PDF marked information. session.datetime date time recording performed (string). provided, PDF marked information. pdf.path PDF output files stored. provided, PDF files produced. simple.output AVQI Praat function can produce either full page report voice profile, much condensed version filling just portion page. simple.output=TRUE, simplified version produced. overwrite.pdfs existing PDF files overwritten PDF output directory? Defaults safe behavior older PDFs overwritten. praat_path explicit path Praat binary.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_avqi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","text":"list following fields: ID speaker / speaker + session identifier output CPPS Smoothed Cepstral Peak Prominence value HNR Harmonic--noise estimate Shim_local (local) Shimmer measurement (%) Shim_local_DB (local) Shimmer measurement, decibels LTAS_Slope slope Long Time Average Spectrum (dB) LTAS_Tilt Long Time Average Spectrum tilt (dB) AVQI Acoustic Voice Quality Index summarizing measures ","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_avqi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","text":"user provides pdf.path, PDF AVQI analysis implemented Praat script (Latoszek et al. 2019)  placed . name PDF speaker.ID_session.datetime, \"NA\" provided. default behavior overwrite existing PDF files, result loss data. user make sure appropriate speaker.ID session.datetime values provided mark output appropriately.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_avqi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Acoustic Voice Quality Index (AVQI) — praat_avqi","text":"Latoszek BBv, Ulozaitė‐Stanienė N, Petrauskas T, Uloza V, Maryn Y (2019). “Diagnostic Accuracy Dysphonia Classification DSI AVQI.” Laryngoscope, 129(3), 692--698. ISSN 0023-852X, doi:10.1002/lary.27350 , http://www.ncbi.nlm.nih.gov/pubmed/30203473.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_dsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Dysphonia Severity Index — praat_dsi","title":"Compute the Dysphonia Severity Index — praat_dsi","text":"function computes Dysphonia Severity Index (DSI) (Wuyts et al. 2000-06)  implemented Praat Maryn et al. (2017) . user asked supply data.frames indicating \"absolute_file_path\" well \"start\", \"end\" times parts sound files together form basis DSI computation speaker.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_dsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Dysphonia Severity Index — praat_dsi","text":"","code":"praat_dsi(   softDF,   highpitchDF,   maxprolongedDF,   stableDF = NULL,   use.calibration = FALSE,   db.calibration = 10,   speaker.name = NULL,   speaker.ID = NULL,   speaker.dob = NULL,   session.datetime = NULL,   pdf.path = NULL,   overwrite.pdfs = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_dsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Dysphonia Severity Index — praat_dsi","text":"softDF data.frame containing file path start end times samples indicating softest voice production speaker. highpitchDF data.frame containing file path start end times samples highest f0 speaker can computed. maxprolongedDF data.frame containing file path start end times samples indicating maximally prolonged vowels speaker. stableDF optional data.frame containing file path start end times samples indicating stable sustained vowel. provided, maxprolongedDF used instead. use.calibration calibration factor added measured intensities computing DSI? db.calibration number dB:s added measured intensity values computing DSI. speaker.name optional name speaker. used PDF output produced. speaker.ID ID speaker. included list output. speaker.dob optional date birth speaker. used PDF output produced. session.datetime string indicating session date (time). used PDF output produced. pdf.path path PDF report file produced. overwrite.pdfs existing PDF files overwritten PDF output directory? Defaults safe behavior older PDFs overwritten. praat_path explicit path Praat binary.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_dsi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Dysphonia Severity Index — praat_dsi","text":"list following fields: ID speaker speaker + session identifier output Maximum.phonation.time speakers maximum phonation time. Softest.intensity..voiced.speech intensity participants softest voice (dB) Maximum.fundamental.frequency maximum f~0~ frequency (Hz) Jitter.ppq5 five-point Period Pertubation Quotient measurement (%) Dysphonia.Severity.Index resulting Dysphonia Severity Index meta-analysis 1330 healthy participants (aged 17.3−94) included indicated average DSI 3.05 healthy speakers, conﬁdence level  2.13 3.98 (Sobol Sielska-Badurek 2020) .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_dsi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Dysphonia Severity Index — praat_dsi","text":"user indicate least one sample participant speaks softly possible (softDF), least one sample maximum f~0~ deduced (highpitchDF), least one sample single vowel maximally prolonged (maxprolongedDF). user can also provide sample maximally stable vowel (stableDF), sample provided (maxprolongedDF) sample reused instead computation DSI sub-component Jitter. user may submit multiple sound samples sets acoustic inputs, sounds files combined DSI sub components computed. largest Maximum performance time used.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_dsi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Dysphonia Severity Index — praat_dsi","text":"Maryn Y, Morsomme D, Bodt MD (2017). “Measuring Dysphonia Severity Index (DSI) Program Praat.” Journal Voice, 31(5), 644.e29--644.e40. ISSN 0892-1997, doi:10.1016/j.jvoice.2017.01.002 , http://www.ncbi.nlm.nih.gov/pubmed/28187924. Sobol M, Sielska-Badurek EM (2020). “Dysphonia Severity Index (DSI)—Normative Values. Systematic Review Meta-Analysis.” Journal Voice. ISSN 0892-1997, doi:10.1016/j.jvoice.2020.04.010 , http://www.ncbi.nlm.nih.gov/pubmed/32381275. Wuyts FL, Bodt MSD, Molenberghs G, Remacle M, Heylen L, Millet B, Lierde KV, Raes J, Heyning PHVd (2000-06). “Dysphonia Severity Index: objective measure vocal quality based multiparameter approach.” Journal Speech, Language Hearing Research, 43(3), 796 -- 809. doi:10.1044/jslhr.4303.796 , https://pubs.asha.org/doi/abs/10.1044/jslhr.4303.796.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formant_burg.html","id":null,"dir":"Reference","previous_headings":"","what":"Formant estimation using the Praat burg algorithm implementation — praat_formant_burg","title":"Formant estimation using the Praat burg algorithm implementation — praat_formant_burg","text":"Formants estimated using Praat's built function (burg algorithm). function also computes intensity (L) formant based power spectrum frequency formant. Naturally, algorithm failed find formant specified time frame, function return formant frequency, bandwidth intensity estimation.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formant_burg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formant estimation using the Praat burg algorithm implementation — praat_formant_burg","text":"","code":"praat_formant_burg(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   numFormants = 5,   maxFormantHz = 5500,   windowSize = 30,   preemphasis = 50,   trackFormants = TRUE,   numberOfTracks = 3,   nominalF1 = 550,   nominalF2 = 1650,   nominalF3 = 2750,   frequencyCost = 1,   bandwidthCost = 1,   transitionCost = 1,   windowShape = \"Gaussian1\",   relativeWidth = 1,   spectWindowShape = \"Gaussian\",   spectResolution = 40,   toFile = TRUE,   explicitExt = \"pfm\",   outputDirectory = NULL,   verbose = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formant_burg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formant estimation using the Praat burg algorithm implementation — praat_formant_burg","text":"listOfFiles vector wav file paths processed function. beginTime time processing end (s) default 0 (zero) means computation formants start start sound file. endTime time processing end (s) default 0 (zero) means formants computed end file. windowShift analysis window shift length (ms). numFormants number formants analysis try find windowSize analysis window length (ms). preemphasis frequency preemphasis applied. trackFormants boolean; Praat attempt gather short time formant frequency estimates tracks? numberOfTracks number tracks follow (trackFormants TRUE), number tracks output. Information frequencies bandwidths formants numbers  numberOfTracks discarded. nominalF1 Described Praat manual preferred value near first track wants . average (.e. adult female) speakers, value around average F1 vowels female speakers, .e. 550 Hz. nominalF2 Described Praat manual preferred value near second track wants . good value around average F2 vowels female speakers, .e. 1650 Hz. nominalF3 Described Praat manual preferred value near third track wants . good value around average F3 vowels female speakers, .e. 2750 Hz. argument ignored choose fewer three tracks, .e., interested F1 F2. frequencyCost Described Praat manual preferred value near five track wants . unlikely case want five tracks, good value may around 4950 Hz.Frequency cost (per kiloHertz) bandwidthCost Described Praat manual local cost bandwidth, relative formant frequency. instance, candidate formant frequency 400 Hz bandwidth 80 Hz, Bandwidth cost 1.0, cost formant track (80/400) · 1.0 = 0.200. see procedure locally favours inclusion candidates low relative bandwidths. transitionCost Described Praat manual cost two different consecutive formant values track. instance, proposed track candidates two consecutive formant values 300 Hz 424 Hz, Transition cost 1.0/octave, cost large frequency jump (0.5 octave) · (1.0/octave) = 0.500. windowShape analysis window function used extracting part sound file analysis. De faults \"Hanning\". relativeWidth relative width windowing function used. spectWindowShape shape windowing function used constructing spectrogram. spectResolution frequency resolution spectrogram formant intensities collected. toFile write output file? file written  outputDirectory, defined, directory soundfile. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. verbose implemented. included compatibility. praat_path give explicit path Praat. maxhzformant praat try find formants frequency spectrum.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formant_burg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formant estimation using the Praat burg algorithm implementation — praat_formant_burg","text":"Ar SSFF track data object (toFile=FALSE) containing three fields (\"F\", \"B\" \"L\") containing formant frequencies, bandwidths intensities.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formant_burg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formant estimation using the Praat burg algorithm implementation — praat_formant_burg","text":"user want estimate formant frequencies, computing using function wrassp::forest much quicker, user therefore mainly consider using function praat_formant_burg use case specifically demands use burg algorithm computing formants, user wants also study formant intensity levels (L_n)  wrassp::forest . have_praat functions.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formantpath_burg.html","id":null,"dir":"Reference","previous_headings":"","what":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","title":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","text":"function exposes Praat's functionality iteratively searching best fit formant track file adjusting maximum formant frequency (frequency ceiling). iteration, Praat's built function (burg algorithm). See (Escudero et al. 2009-09)  example procedure used (Weenink others 2015)  description optimal formant track identified. stepsUpDown zero, function praat_formant_burg function produce result identical settings used. function also computes intensity (L) best fit formant tracks based power spectrum frequency formant. Naturally, algorithm failed find formant specified time frame, function return formant frequency, bandwidth intensity estimation.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formantpath_burg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","text":"","code":"praat_formantpath_burg(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   numFormants = 5,   maxFormantHz = 5500,   windowSize = 30,   preemphasis = 50,   ceilingStepSize = 0.05,   stepsUpDown = 4,   trackFormants = TRUE,   numberOfTracks = 3,   nominalF1 = 550,   nominalF2 = 1650,   nominalF3 = 2750,   frequencyCost = 1,   bandwidthCost = 1,   transitionCost = 1,   windowShape = \"Gaussian1\",   relativeWidth = 1,   spectWindowShape = \"Gaussian\",   spectResolution = 40,   toFile = TRUE,   explicitExt = \"pfp\",   outputDirectory = NULL,   verbose = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formantpath_burg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","text":"listOfFiles vector wav file paths processed function. beginTime time processing end (s) default 0 (zero) means computation formants start start sound file. endTime time processing end (s) default 0 (zero) means formants computed end file. windowShift analysis window shift length (ms). numFormants number formants analysis try find maxFormantHz maximum frequency formants found windowSize analysis window length (ms). preemphasis frequency preemphasis applied. ceilingStepSize function multiple searches formant tracks frequency ceiling set maxhzformant*exp(-ceilingStepSize*stepsUpDown) maxhzformant*exp(ceilingStepSize*stepsUpDown). stepsUpDown number iterations increases decreases frequency ceiling use trying find optimal formant track. trackFormants boolean; Praat attempt gather short time formant frequency estimates tracks? numberOfTracks number tracks follow (trackFormants TRUE), number tracks output. Information frequencies bandwidths formants numbers  numberOfTracks discarded. nominalF1 Described Praat manual preferred value near first track wants . average (.e. adult female) speakers, value around average F1 vowels female speakers, .e. 550 Hz. nominalF2 Described Praat manual preferred value near second track wants . good value around average F2 vowels female speakers, .e. 1650 Hz. nominalF3 Described Praat manual preferred value near third track wants . good value around average F3 vowels female speakers, .e. 2750 Hz. argument ignored choose fewer three tracks, .e., interested F1 F2. frequencyCost Described Praat manual preferred value near five track wants . unlikely case want five tracks, good value may around 4950 Hz.Frequency cost (per kiloHertz) bandwidthCost Described Praat manual local cost bandwidth, relative formant frequency. instance, candidate formant frequency 400 Hz bandwidth 80 Hz, Bandwidth cost 1.0, cost formant track (80/400) · 1.0 = 0.200. see procedure locally favours inclusion candidates low relative bandwidths. transitionCost Described Praat manual cost two different consecutive formant values track. instance, proposed track candidates two consecutive formant values 300 Hz 424 Hz, Transition cost 1.0/octave, cost large frequency jump (0.5 octave) · (1.0/octave) = 0.500. windowShape analysis window function used extracting part sound file analysis. De faults \"Hanning\". relativeWidth relative width windowing function used. spectWindowShape shape windowing function used constructing spectrogram. spectResolution frequency resolution spectrogram formant intensities collected. toFile write output file? file written  outputDirectory, defined, directory sound file. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. verbose implemented. included compatibility. praat_path give explicit path Praat. praat","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formantpath_burg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","text":"SSFF track data object (toFile=FALSE) containing three fields (\"F\", \"B\" \"L\") containing formant frequencies, bandwidth intensities.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formantpath_burg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","text":"user want estimate formant frequencies later manually corrected, computing using function wrassp::forest even praat_formant_burg much quicker. user consider function use case specifically demands iterative serch best fit formants.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_formantpath_burg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Formant estimation using the FormantPath functionality of Praat — praat_formantpath_burg","text":"Escudero P, Boersma P, Rauber , Bion RAH (2009-09). “cross-dialect acoustic description vowels: Brazilian European Portuguese.” Journal Acoustical Society America, 126(3), 1379--1393. ISSN 0001-4966, doi:10.1121/1.3180321 , http://www.ncbi.nlm.nih.gov/pubmed/19739752. Weenink D, others (2015). “Improved formant frequency measurements short segments.” ICPhS.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/praat_intensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a sound signal intensity track using Praat — praat_intensity","title":"Compute a sound signal intensity track using Praat — praat_intensity","text":"function calls Praat compute intensity contour sound file, return result Assp Data Object stored SSFF file (default), returned object. analysis attempt compensate effect periodicity introduced pitch produced speech, well constant pressure recording environment supplied appropriate arguments.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_intensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a sound signal intensity track using Praat — praat_intensity","text":"","code":"praat_intensity(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 80,   subtractMean = TRUE,   window = \"Gaussian1\",   relativeWidth = 1,   toFile = TRUE,   explicitExt = \"int\",   outputDirectory = NULL,   verbose = TRUE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_intensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a sound signal intensity track using Praat — praat_intensity","text":"listOfFiles list sound files analyzed. beginTime time (s) analysis begin. endTime time (s) analysis end windowShift time step (ms) resulting intensity contour. minF minimum periodicity sound signal. set high, intensity variations within pitch period influence computed intensity contour. set low, smearing intensity contour may hide rapid intensity variations. subtractMean average intensity subtracted order compensate constant pressure recording environment? window windowing function applied extracting part recording analysis? Allowed windowing functions \"rectangular\", \"triangular\", \"parabolic\", \"Hanning\", \"Hamming\", \"Gaussian1\", \"Gaussian2\", \"Gaussian3\", \"Gaussian4\", \"Gaussian5\", \"Kaiser1\", \"Kaiser2\". Consult Praat manual details. relativeWidth relative window used extracting part sound file analysis. toFile SSFF track written file (TRUE) returned object (FALSE) explicitExt SSFF file written disk name original sound file, file extension. outputDirectory directory SSFF track stored. Defaults directory sound file. verbose comparability wrassp functions, expected EmuR. Nothing happens set FALSE: praat_path explicit path Praat executable.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_intensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a sound signal intensity track using Praat — praat_intensity","text":"SSFF object containing intensity track (toFile==FALSE).","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute spectral moments using Praat — praat_moments","title":"Compute spectral moments using Praat — praat_moments","text":"function takes sound file, indicated part sound file, computes first (Center gravity), second (Standard deviation), third (skewness), fourth (kurtosis) spectral moments regular intervals. moments stored separate tracks SSFF signal object disk, optionally returned object (toFile=FALSE).","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute spectral moments using Praat — praat_moments","text":"","code":"praat_moments(   listOfFiles,   beginTime = NULL,   endTime = NULL,   windowShift = 5,   windowSize = 25,   freqBinSize = 20,   power = 2,   maximumFrequency = NULL,   windowShape = \"Gaussian1\",   relativeWidth = 1,   toFile = TRUE,   explicitExt = \"pmo\",   outputDirectory = NULL,   verbose = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute spectral moments using Praat — praat_moments","text":"listOfFiles full paths files processed. beginTime start time portion wave included. argument needs either single value vector length listOfFiles. endTime end time portion wave included. Like beginTime argument needs either single value vector length listOfFiles. windowShift time step (time) analysis windows (ms). windowSize size time aligned analysis window (ms). freqBinSize spectral resolution. power power used computing spectral moments. power=1 spectral moments computed absolute spectrum, power=2 computed based power spectrum. maximumFrequency cutoff frequency (Hz) used computing spectrum. Frequencies cutoff included computing spectral moments. windowShape window type used extracting section wave file analysis. Permitted values \"rectangular\", \"triangular\", \"parabolic\", \"Hanning\", \"Hamming\", \"Gaussian1\", \"Gaussian2\", \"Gaussian3\", \"Gaussian4\", \"Gaussian5\", \"Kaiser1\", \"Kaiser2\". See Praat manual descriptio window shapes. relativeWidth relative width windowing function used extracting part sound file. toFile SSFF signal tracks store disk returned? explicitExt signal file extension. outputDirectory signal file stored. NULL, signal file stored directory wave file. verbose Produce verbose output? praat_path location Praat executable stored.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute spectral moments using Praat — praat_moments","text":"SSFF file (toFile=FALSE), nothing.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_moments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute spectral moments using Praat — praat_moments","text":"default, moments based entire spectrum sound file, means depend sampling frequency file. user may however choose include just portion spectrum cutoff frequency required. way, user may opt limit analysis half smallest sampling rate collection sound files thereby produce comparable results.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_pitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute f0 tracks using Praat — praat_pitch","title":"Compute f0 tracks using Praat — praat_pitch","text":"function calls Praat compute f0 tracks. auto-correlation cross-correlation methods used, results stored separate fields returned SSFF track object. arguments function map directly formal arguments underlying Praat procedure, description therefore replicated . See Praat manual information.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_pitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute f0 tracks using Praat — praat_pitch","text":"","code":"praat_pitch(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 75,   maxF = 600,   max.f0.candidates = 15,   very.accurate = TRUE,   silence.threshold = 0.03,   voicing.threshold = 0.45,   octave.cost = 0.01,   octave.jump.cost = 0.35,   voiced.voiceless.cost = 0.14,   corr.only = FALSE,   windowSize = 40,   min.filter.freq = 70,   max.filter.freq = 5000,   filters = 250,   max.freq.components = 1250,   subharmonics = 15,   compression = 0.84,   points.per.octave = 48,   windowShape = \"Gaussian1\",   relativeWidth = 1,   toFile = TRUE,   explicitExt = \"pf0\",   outputDirectory = NULL,   verbose = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_pitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute f0 tracks using Praat — praat_pitch","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. supply 0, Praat use time step 0.75 / (pitch floor), e.g. 0.01 seconds pitch floor 75 Hz; example, Praat computes 100 pitch values per second. minF candidates frequency recruited. parameter determines effective length analysis window: 3 longest periods long, .e., pitch floor 75 Hz, window effectively 3/75 = 0.04 seconds long. Note set time step zero, analysis windows consecutive measurements overlap appreciably: Praat always compute 4 pitch values within one window length, .e., degree oversampling 4. maxF Candidates frequency ignored. max.f0.candidates maximum numbrf f0 candidates consider .accurate FALSE, window Hanning window physical length 3 / (pitch floor). TRUE, window Gaussian window physical length 6 / (pitch floor), .e. twice effective length. silence.threshold Frames contain amplitudes threshold (relative global maximum amplitude), probably silent. voicing.threshold strength unvoiced candidate, relative maximum possible autocorrelation. increase number unvoiced decisions, increase value. octave.cost degree favoring high-frequency candidates, relative maximum possible autocorrelation. necessary even (: especially) case perfectly periodic signal, undertones f0 equally strong candidates f0 . strongly favour recruitment high-frequency candidates, increase value. octave.jump.cost Degree disfavoring pitch changes, relative maximum possible autocorrelation. decrease number large frequency jumps, increase value. contrast described (Boersma 1993) , value corrected time step: multiply 10ms / windowShift get value way used formulas article. voiced.voiceless.cost Degree disfavoring voiced/unvoiced transitions, relative maximum possible autocorrelation. decrease number voiced/unvoiced transitions, increase value. contrast described article, value corrected time step: multiply 10 ms / windowShift get value way used formulas (Boersma 1993) . corr.boolean; Compute autocorrelation (AC) cross-correlation (CC) estimates f0 . FALSE (default) function additionally estimate f0 using Spatial Pitch Network (SPINET) model (Cohen et al. 1995)  well using spectral compression (SHS) model (Hermes 1988) . computational load increased considerably f0 estimates, avoided explicitly needed setting parameter TRUE. windowSize window size used computing SPINET model. min.filter.freq minimum filter frequency used computing SPINET model. max.filter.freq maximum filter frequency used computing SPINET model. filters number filters used computing SPINET model. max.freq.components higher frequencies considered computing SHS. subharmonics maximum number harmonics add pitch SHS. compression factor successive compressed spectra multiplied summation SHS. points.per.octave determines sampling logarithmic frequency scale SHS. windowShape analysis window function used extracting part sound file analysis. De faults \"Hanning\". relativeWidth relative width windowing function used. toFile write output file? file written  outputDirectory, defined, directory soundfile. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. verbose implemented. included compatibility. praat_path give explicit path Praat.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_pitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute f0 tracks using Praat — praat_pitch","text":"SSFF object containing f0 tracks (toFile==FALSE).","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_pitch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute f0 tracks using Praat — praat_pitch","text":"Boersma P (1993). “Accurate short-term analysis fundamental frequency harmonics--noise ratio sampled sound.” Proceedings institute phonetic sciences, volume 17, 97--110. Cohen MA, Grossberg S, Wyse LL (1995). “spectral network model pitch perception.” Journal Acoustical Society America, 98(2), 862--879. ISSN 0001-4966, doi:10.1121/1.413512 , http://www.ncbi.nlm.nih.gov/pubmed/7642825. Hermes DJ (1988). “Measurement pitch subharmonic summation.” Journal Acoustical Society America, 83(1), 257--264. ISSN 0001-4966, doi:10.1121/1.396427 , http://www.ncbi.nlm.nih.gov/pubmed/3343445.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_sauce.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","title":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","text":"function applies praat_sauce bundle Praat scripts single file puts resulting data tracks SSFF file. default, analyses applied windowed portion signal every 5ms.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_sauce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","text":"","code":"praat_sauce(   listOfFiles,   beginTime = NULL,   endTime = NULL,   windowShift = 5,   windowSize = 25,   minF = 50,   maxF = 300,   formantTracking = TRUE,   numFormants = 5,   maxFormantHz = 5000,   nominalF1 = 500,   nominalF2 = 1500,   nominalF3 = 2500,   preEmphFrom = 50,   useBandwidthFormula = FALSE,   channel = 1,   resample_to_16k = TRUE,   toFile = TRUE,   explicitExt = \"psa\",   outputDirectory = NULL,   verbose = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_sauce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","text":"listOfFiles vector file names beginTime time sound file analysis start. endTime last time point included analysed sample. zero (0), sound file included end. windowShift time shift next analysis window. Defaults every 5ms. windowSize analysis window length (ms). minF minimal f0 search . maxF maximum f0 search . formantTracking Boolean; formant tracking abilities Praat used? Defaults TRUE. disabled, raw window--window formant values used. numFormants number formants found within frequency space. maxFormantHz cutoff frequency used finding numFormants formants. nominalF1 nominal F1 used formant tracking. nominalF2 nominal F2 used formant tracking. nominalF3 nominal F3 used formant tracking. preEmphFrom frequency pre-emphasis applied. useBandwidthFormula bandwidth calculation metod Hawks Miller (1995)  used, instead Praat's internal algorithm. Defaults TRUE (use Hawks & Miller's method). channel channel use analyse. Defaults first channel. resample_to_16k Resample signal 16000 Hz processing? Defaults TRUE. toFile SSFF track file written disk? Defaults true, default means written file explicitExt extension  next sound file. explicitExt default file extension use SSFF file. outputDirectory path alternative output directory. verbose Verbose output. currently used. praat_path=NULL","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_sauce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","text":"function builds SSFF track object writes disk, returns (toFile==FALSE). track object contain tracks fields: f0 track fundamental frequency computed Praat signal part PraatSauce analysis. fm Computed formant frequency measures, optionally tracked, one column per formant. bw Computed formant bandwiths, one column per formant. H amplitudes first three harmonics, computed without accounting influence adjecent formants (uncorrected). Hc amplitudes first three harmonics, influence adjecent formants accounted (corrected). amplitudes three harmonics closest center frequency first three formants, computed without accounting influence adjecent formants (uncorrected). Ac amplitudes three harmonics closest center frequency first three formants, influence adjecent formants accounted (corrected). HH  differences (uncorrected) amplitudes first second (column 1) second fourth (column 2). HHc  differences amplitudes first second (column 1) second fourth (column 2), computed correction regards neighbouring formants. HA  differences (uncorrected) amplitudes harmonics closest center frequencies first second (column 1) second fourth (column 2) formants. HAc  differences amplitudes harmonics closest center frequencies first second (column 1) second fourth (column 2) formants, corrected influence adjecent formants . cpp track containing smoothed Cepstral Peak Prominence (Fraile Godino-Llorente 2014; Hillenbrand et al. 1994)  across acoustic signal. hnr Harmonic--noise ratios defined (Krom 1993)  frequencies 0-500 Hz, 0-1500 Hz, 0-2500 Hz, 0-3500 Hz, respectively. (four columns)","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_sauce.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","text":"Fraile R, Godino-Llorente JI (2014). “Cepstral peak prominence: comprehensive analysis.” Biomedical Signal Processing Control, 14, 42--54. ISSN 1746-8094, doi:10.1016/j.bspc.2014.07.001 . Hawks JW, Miller JD (1995). “formant bandwidth estimation procedure vowel synthesis.” Journal Acoustical Society America, 97(2), 1343--1344. ISSN 0001-4966, doi:10.1121/1.412986 , http://www.ncbi.nlm.nih.gov/pubmed/7876453. Hillenbrand J, Cleveland RA, Erickson RL (1994). “Acoustic Correlates Breathy Vocal Quality.” Journal Speech, Language, Hearing Research, 37(4), 769--778. ISSN 1092-4388, doi:10.1044/jshr.3704.769 , http://www.ncbi.nlm.nih.gov/pubmed/7967562. Krom Gd (1993). “Cepstrum-Based Technique Determining Harmonics--Noise Ratio Speech Signals.” Journal Speech, Language, Hearing Research, 36(2), 254--266. ISSN 1092-4388, doi:10.1044/jshr.3602.254 , http://www.ncbi.nlm.nih.gov/pubmed/8487518.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_sauce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call the 'praat_sauce' analysis bundle to generate SSFF tracks — praat_sauce","text":"","code":"if (FALSE) {  }"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the components of a Praat Voice report — praat_voice_report","title":"Compute the components of a Praat Voice report — praat_voice_report","text":"Praat program defines voice report containing range fundamental properties voice sample. common application voice report sustained vowel. function computes report sectio recording using Praat, returns voice measures list. function also enable user mark just part sustained vowel analysis using offset subsample length. scenario, user specifies start end times (beginTime endTime, respectively) sustained vowel. , user specifies selectionOffset, number seconds vowel extraction analysis start. Finally, user specifies selectionLength, (maximum) length extracted part. means user sustained vowel staring 1 second signal extends 2 seconds (short), user asks 2 second extraction starting 0.5 s vowel, actually analysed portion 1.5s 3s (1.5s signal, 2s user asked ). behavior user inadvertently adding parts part sustaind vowel production. user may course always choose disregard measurements based short sample.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the components of a Praat Voice report — praat_voice_report","text":"","code":"praat_voice_report(   listOfFiles,   beginTime = NULL,   endTime = NULL,   selectionOffset = NULL,   selectionLength = NULL,   windowShape = \"Gaussian1\",   relativeWidth = 1,   minF = 75,   maxF = 600,   max_period_factor = 1.3,   max_ampl_factor = 1.6,   silence_threshold = 0.03,   voicing_threshold = 0.45,   octave_cost = 0.01,   octave_jump_cost = 0.35,   voiced_unvoiced_cost = 0.14,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the components of a Praat Voice report — praat_voice_report","text":"listOfFiles full path sound file. beginTime time point (s) sound file sustained vowel starts. NULL, start sound file also viewed start sustained vowel production. endTime time point (s) sound file sustained vowel ends. NULL, everyting end sound file considered part sustained vowel. selectionOffset optional offset added time sustained vowel production determining start extracted portion vowel. selectionLength optional (maximal) length selection. windowShape window shape used extracting vowel. May one \"rectangular\", \"triangular\", \"parabolic\", \"Hanning\", \"Hamming\", \"Gaussian1\", \"Gaussian2\", \"Gaussian3\", \"Gaussian4\", \"Gaussian5\", \"Kaiser1\", \"Kaiser2\". relativeWidth relative width window used extracting vowel portion. minF minimum pitch (f~0~) considered. maxF maximum pitch (f~0~) considered. max_period_factor larges possible differences consecutive intervals used computing jitter. Please consult Praat manual information. max_ampl_factor larges possible differences consecutive intervals used computing schimmer Please consult Praat manual information. silence_threshold silence threshold. Please consult Praat manual information. voicing_threshold voicing  threshold. Please consult Praat manual information. octave_cost octave cost. Please consult Praat manual information. octave_jump_cost octave jump cost. Please consult Praat manual information. voiced_unvoiced_cost cost voiced unvoiced change detection. Please consult Praat manual information. praat_path optional explicit path Praat binary. usually required.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the components of a Praat Voice report — praat_voice_report","text":"list voice parameters: Median pitch median pitch (f~0~) sample (Hz) Mean pitch mean pitch (f~0~) sample (Hz) Standard deviation standard deviation pitch (f~0~, Hz) sample. Minimum pitch lowest pitch (f~0~) detected (Hz) Maximum pitch highest pitch (f~0~) detected (Hz) Number pulses number pulses detected Number periods number periods detected Mean period average period length Standard deviation period standard deviation period length Fraction locally unvoiced frames fraction frames detected unvoiced sample. Number voice breaks Number voice breaks Degree voice breaks number voice breaks relation number frames Jitter (local) average absolute difference consequtive periods, divided average period (%). See Praat manual information. Jitter (local, absolute) average absolute difference consequtive periods, seconds. See Praat manual information. Jitter (rap) three point Relative Average Pertubation: average absolute difference period three point local average, divided average period (%). Jitter (ppq5) five point Relative Average Pertubation: average absolute difference period five point local average, divided average period (%). Jitter (ddp) average absolute difference consequtive differences periods, divided average period (%). Shimmer (local) average absolute difference amplitudes consequtive periods, divided average amplitude (%). Shimmer (local, dB) average absolute difference amplitudes consequtive periods (dB). Shimmer (apq3) three point Amplitude Pertubation Quotient: average absolute difference amplitude period three point local average, divided average amplitude (%). Shimmer (apq5) five point Amplitude Pertubation Quotient: average absolute difference amplitude period five point local average, divided average amplitude (%). Shimmer (apq11) 11 point Amplitude Pertubation Quotient: average absolute difference amplitude period 11 point local average, divided average amplitude (%). Shimmer (dda) average absolute difference consequtive differences amplitudes consequtive periods, divided average period (%). Mean autocorrelation average autocorrelation signal. Mean noise--harmonics ratio average NHR voice sample. Mean harmonics--noise ratio average HNR voice sample.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the components of a Praat Voice report — praat_voice_report","text":"may advantageous cases may suspected ","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_tremor.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes 18 measures of (vocal) tremor — praat_voice_tremor","title":"Computes 18 measures of (vocal) tremor — praat_voice_tremor","text":"function calls Praat applies \"tremor 3.05\" package (Brückl 2021)  compute measures voice tremor (Brückl et al. 2017)  sustained vowel. user may compute measures entire sample identify portion sound file sustained produced (beginTime endTime arguments). user may additionally specify offset (selectionOffset) beginTime measurements start, well (maximum) selection length. Using arguments user may mark sustained vowels produced database, apply function across 2 second sample  1 second vowel, thus avoid vowel initial effects phonation affecting measurements.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_tremor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes 18 measures of (vocal) tremor — praat_voice_tremor","text":"","code":"praat_voice_tremor(   listOfFiles,   beginTime = NULL,   endTime = NULL,   selectionOffset = NULL,   selectionLength = 3,   windowShape = \"Gaussian1\",   relativeWidth = 1,   minF = 75,   maxF = 600,   windowShift = 5,   max_period_factor = 1.3,   max_ampl_factor = 1.6,   silence_threshold = 0.03,   voicing_threshold = 0.45,   octave_cost = 0.01,   octave_jump_cost = 0.35,   voiced_unvoiced_cost = 0.14,   envelope.amplitude = TRUE,   min.tremor.hz = 1.5,   max.tremor.hz = 15,   contour.magnitude.threshold = 0.01,   tremor.cyclicality.threshold = 0.15,   freq.tremor.octave.cost = 0.01,   ampl.tremor.octave.cost = 0.01,   na.zero = FALSE,   praat_path = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_tremor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes 18 measures of (vocal) tremor — praat_voice_tremor","text":"listOfFiles full path sound file. beginTime time point (s) sound file sustained vowel starts. NULL, start sound file also viewed start sustained vowel production. endTime time point (s) sound file sustained vowel ends. NULL, everyting end sound file considered part sustained vowel. selectionOffset optional offset added time sustained vowel production determining start extracted portion vowel. selectionLength optional (maximal) length selection. windowShape window shape used extracting vowel. May one \"rectangular\", \"triangular\", \"parabolic\", \"Hanning\", \"Hamming\", \"Gaussian1\", \"Gaussian2\", \"Gaussian3\", \"Gaussian4\", \"Gaussian5\", \"Kaiser1\", \"Kaiser2\". relativeWidth relative width window used extracting vowel portion. minF minimum pitch (f~0~) considered. maxF maximum pitch (f~0~) considered. windowShift number milliseconds analysis window centers. max_period_factor larges possible differences consecutive intervals used computing jitter. Please consult Praat manual information. max_ampl_factor larges possible differences consecutive intervals used computing schimmer Please consult Praat manual information. silence_threshold silence threshold. Please consult Praat manual information. voicing_threshold voicing  threshold. Please consult Praat manual information. octave_cost octave cost. Please consult Praat manual information. octave_jump_cost octave jump cost. Please consult Praat manual information. voiced_unvoiced_cost cost voiced unvoiced change detection. Please consult Praat manual information. na.zero measurements voice tremor determined returned zero value, NA (default). praat_path optional explicit path Praat binary. usually required.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_tremor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes 18 measures of (vocal) tremor — praat_voice_tremor","text":"list voice tremor measurements : FCoM frequency contour magnitude FTrC (maximum) frequency tremor cyclicality FMon number frequency modulations thresholds FTrF Hz (strongest) frequency tremor frequency FTrI % frequency tremor intensity index FTrP frequency tremor power index FTrCIP frequency tremor cyclicality intensity product FTrPS frequency tremor product sum FCoHNRdB frequency contour harmonicity--noise ratio ACoM amplitude contour magnitude ATrC (maximum) amplitude tremor cyclicality AMoN number amplitude modulations thresholds ATrF Hz (strongest) amplitude tremor frequency ATrI % amplitude tremor intensity index ATrP amplitude tremor power index ATrCIP amplitude tremor cyclicality intensity product ATrPS amplitude tremor product sum ACoHNRdB amplitude contour harmonicity--noise ratio","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/praat_voice_tremor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computes 18 measures of (vocal) tremor — praat_voice_tremor","text":"Brückl MAE (2021). “Praat-script computation 18 measures (vocal) tremor.” doi:10.13140/RG.2.2.13850.57287 . Brückl MAE, Ibragimova E, Bögelein S (2017). “Acoustic Tremor Measurement: Comparing Two Systems.” Proceedings 10th International Workshop Models Analysis Vocal Emissions Biomedical Applications (MAVEBA), 19--22.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/pyin.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate pitch using the probabilistic YIN algorithm — pyin","title":"Estimate pitch using the probabilistic YIN algorithm — pyin","text":"probabilistic YIN algorithm (Mauch Dixon 2014)  extension YIN (Cheveigné Kawahara 2002)  considers multiple pitch candidates hidden Markov model Viterbi-decoded deduce final pitch estimate. function also returns track encoding whether track considered voiced , track containing probability voicing analysis frame.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/pyin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate pitch using the probabilistic YIN algorithm — pyin","text":"","code":"pyin(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   windowSize = 30,   minF = 70,   maxF = 200,   max_transition_rate = 35.92,   beta_parameters = c(2, 18),   center = TRUE,   boltzmann_parameter = 2,   resolution = 0.1,   thresholds = 100,   switch_probability = 0.01,   no_trough_probability = 0.01,   pad_mode = \"constant\",   explicitExt = \"pyp\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/pyin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate pitch using the probabilistic YIN algorithm — pyin","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. max_transition_rate maximum pitch transition rate octaves per second. beta_parameters shape parameters beta distribution prior thresholds. center analysis windows centered around time window (TRUE, default) window considered started indicated time point (FALSE). boltzmann_parameter shape parameter Boltzmann distribution prior troughs. Larger values assign mass smaller periods. resolution resolution pitch bins. 0.01 corresponds cents. thresholds number thresholds peak estimation. switch_probability probability switching voiced unvoiced vice versa. no_trough_probability maximum probability add global minimum trough threshold. pad_mode mode padding occurs. Ignored center TRUE. Padding occurs python library librosa, user therefore consult manual NumPy library function numpy.pad options. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/pyin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate pitch using the probabilistic YIN algorithm — pyin","text":"SSFF track object containing two tracks (f0 pitch) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/pyin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate pitch using the probabilistic YIN algorithm — pyin","text":"function calls librosa (McFee et al. 2022)  Python library load audio data make pitch related estimates.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/pyin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate pitch using the probabilistic YIN algorithm — pyin","text":"Cheveigné Ad, Kawahara H (2002). “YIN, fundamental frequency estimator speech music.” Journal Acoustical Society America, 111(4), 1917--1930. ISSN 0001-4966, doi:10.1121/1.1458024 , http://www.ncbi.nlm.nih.gov/pubmed/12002874. Mauch M, Dixon S (2014). “PYIN: Fundamental Frequency Estimator using Probabilistic Threshold Distributions.” 2014 IEEE International Conference Acoustics, Speech Signal Processing (ICASSP), 659--663. doi:10.1109/icassp.2014.6853678 . McFee B, Metsai , McVicar M, Balke S, Thomé C, Raffel C, Zalkow F, Malek , Dana, Lee K, Nieto O, Ellis D, Mason J, Battenberg E, Seyfarth S, Yamamoto R, viktorandreevichmorozov, Choi K, Moore J, Bittner R, Hidaka S, Wei Z, nullmightybofo, Weiss , Hereñú D, Stöter F, Friesch P, Vollrath M, Kim T, Thassilo (2022). “librosa/librosa: 0.9.1.” doi:10.5281/zenodo.6097378 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rapt.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute f0 using the RAPT algorithm — rapt","title":"Compute f0 using the RAPT algorithm — rapt","text":"function takes sound file computes f$_0$ estimate pitch using \"robust algorithm pitch tracking\" (RAPT) algorithm (Talkin Kleijn 1995) .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rapt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute f0 using the RAPT algorithm — rapt","text":"","code":"rapt(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 70,   maxF = 200,   voicing.threshold = 0.3,   explicitExt = \"swi\",   outputDirectory = NULL,   toFile = TRUE,   conda.env = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/rapt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute f0 using the RAPT algorithm — rapt","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. voicing.threshold Voice/unvoiced threshold. Default 0.3. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. conda.env name conda environment Python required packages stored. Please make sure know change .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rapt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute f0 using the RAPT algorithm — rapt","text":"SSFF track object containing two tracks (f0 pitch) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rapt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute f0 using the RAPT algorithm — rapt","text":"implementation RAPT Speech Signal Processing Toolkit (SPTK) (Group others 2017)  used, called via Python interface retiulate R package compute signal track. Therefore, user make sure python environment present can attached reticulate. anaconda environment recommended, can set user setup procedure involve least commands:   make functionality function requires available.","code":"conda create conda create --prefix -n pysuperassp python=3.8  conda activate pysuperassp pip install librosa pip install pysptk #Not used by this function but by other functions in this package pip install pyreaper"},{"path":"https://humlab-speech.github.io/superassp/reference/rapt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute f0 using the RAPT algorithm — rapt","text":"Group SW, others (2017). “Speech Signal Processing Toolkit (SPTK), 2017.” http://sp-tk.sourceforge. net. Talkin D, Kleijn WB (1995). “robust algorithm pitch tracking (RAPT).” Speech coding synthesis, 495, 518.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract f0 tracks using the REAPER algoritm — reaper","title":"Extract f0 tracks using the REAPER algoritm — reaper","text":"Robust Epoch Pitch EstimatoR (REAPER) algorithm (Talkin 2019)  uses EpochTracker class simultaneously estimate location voiced-speech \"epochs\" glottal closure instants (GCI), voicing state (voiced unvoiced) fundamental frequency (F0 \"pitch\"). local (instantaneous) f0 defined inverse time successive GCI. function returns f0 normalized CGI cross-correlation windowed windowShift (ms) portion signal.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract f0 tracks using the REAPER algoritm — reaper","text":"","code":"reaper(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 40,   maxF = 500,   unvoiced_cost = 0.9,   high.pass = TRUE,   hilbert.transform = FALSE,   explicitExt = \"rp0\",   outputDirectory = NULL,   toFile = TRUE,   conda.env = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/reaper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract f0 tracks using the REAPER algoritm — reaper","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. unvoiced_cost Set cost unvoiced segments. Default 0.9, higher value f0 estimates noise. high.pass Perform high-pass filtering remove DC low-frequency noise? hilbert.transform Remove phase distortion using Hilbert transform? explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. conda.env name conda environment Python required packages stored. Please make sure know change . Defaults NULL, means default enviroment environment set RETICULATE_PYTHON environment variable used.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract f0 tracks using the REAPER algoritm — reaper","text":"SSFF track object containing two tracks (f0 corr) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract f0 tracks using the REAPER algoritm — reaper","text":"DC bias low-frequency noise removed high-pass filtering, signal converted floating point. input known phase distortion impacting tracker performance, Hilbert transform, optionally done point, may improve performance. function uses python library pyreaper combined R package reticulate compute tracks, user therefore make sure pyreaper python available machine. recommended set anaconda (\"conda\") environment superassp library, like :","code":"conda create conda create --prefix -n pysuperassp python=3.8  conda activate pysuperassp  pip install librosa pip install pyreaper  #Not used by this function but by other functions in this package  pip install pysptk"},{"path":"https://humlab-speech.github.io/superassp/reference/reaper.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract f0 tracks using the REAPER algoritm — reaper","text":"Talkin D (2019). “REAPER: Robust epoch pitch estimator.” https://github.com/google/REAPER.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper_pm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract pitch marks using the REAPER algoritm — reaper_pm","title":"Extract pitch marks using the REAPER algoritm — reaper_pm","text":"Robust Epoch Pitch EstimatoR (REAPER) algorithm (Talkin 2019)  uses EpochTracker class simultaneously estimate location voiced-speech \"epochs\" glottal closure instants (GCI), voicing state (voiced unvoiced) fundamental frequency (F0 \"pitch\"). function returns voicing state windowed windowShift (ms) portion signal.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper_pm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract pitch marks using the REAPER algoritm — reaper_pm","text":"","code":"reaper_pm(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 10,   minF = 40,   maxF = 500,   unvoiced_cost = 0.9,   high.pass = TRUE,   hilbert.transform = FALSE,   explicitExt = \"rpm\",   outputDirectory = NULL,   toFile = TRUE,   conda.env = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/reaper_pm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract pitch marks using the REAPER algoritm — reaper_pm","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. unvoiced_cost Set cost unvoiced segments. Default 0.9, higher value f0 estimates noise. high.pass Perform high-pass filtering remove DC low-frequency noise? hilbert.transform Remove phase distortion using Hilbert transform? explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. conda.env name conda environment Python required packages stored. Please make sure know change . Defaults NULL, means default enviroment environment set RETICULATE_PYTHON environment variable used.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper_pm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract pitch marks using the REAPER algoritm — reaper_pm","text":"SSFF track object containing two tracks (f0 corr) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/reaper_pm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract pitch marks using the REAPER algoritm — reaper_pm","text":"DC bias low-frequency noise removed high-pass filtering, signal converted floating point. input known phase distortion impacting tracker performance, Hilbert transform, optionally done point, may improve performance. function uses python library pyreaper combined R package reticulate compute tracks, user therefore make sure pyreaper python available machine. recommended set anaconda (\"conda\") environment superassp library, like :","code":"conda create conda create --prefix -n pysuperassp python=3.8  conda activate pysuperassp  pip install librosa pip install pyreaper  #Not used by this function but by other functions in this package  pip install pysptk"},{"path":"https://humlab-speech.github.io/superassp/reference/reaper_pm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract pitch marks using the REAPER algoritm — reaper_pm","text":"Talkin D (2019). “REAPER: Robust epoch pitch estimator.” https://github.com/google/REAPER.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rfcana.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Prediction analysis (From the 'wrassp' package) — rfcana","title":"Linear Prediction analysis (From the 'wrassp' package) — rfcana","text":"rfcana function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rfcana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Prediction analysis (From the 'wrassp' package) — rfcana","text":"","code":"rfcana(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   windowShift = 5,   windowSize = 20,   effectiveLength = TRUE,   window = \"BLACKMAN\",   order = 0,   preemphasis = -0.95,   lpType = \"RFC\",   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/rfcana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Prediction analysis (From the 'wrassp' package) — rfcana","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default = 0: begin file) centerTime set single-frame analysis analysis window centred <time> seconds;  overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default = 0: end file) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) windowSize = <dur>: set analysis window size <dur> ms; overrules effectiveLength option effectiveLength make window size effective rather exact window = <type>: set analysis window function <type> (default: BLACKMAN) order = <num>: set prediction order <num> (default: sample rate kHz + 3) preemphasis = <val>: set pre-emphasis factor <val> (default: -0.95) lpType = <type>: calculate <type> LP parameters; <type> may : \"ARF\": area function \"LAR\": log area ratios \"LPC\": linear prediction filter coefficients \"RFC\": reflection coefficients (default) toFile write results file (default extension dependent LpType .arf/.lar/.lpc/.rfc) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rfcana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Prediction analysis (From the 'wrassp' package) — rfcana","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rfcana.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Prediction analysis (From the 'wrassp' package) — rfcana","text":"Linear Prediction analysis <listOfFiles> using autocorrelation method Durbin recursion. program calculates RMS amplitudes input residual signal dB , per default, reflection coefficients (see '-t' option). Analysis results written file base name input file parameter type lower case extension (e.g. '.rfc'). Default output SSFF binary format (tracks 'rms', 'gain' LP type lower case).","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/rmsana.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of short-term Root Mean Square amplitude (From the 'wrassp' package) — rmsana","title":"Analysis of short-term Root Mean Square amplitude (From the 'wrassp' package) — rmsana","text":"rmsana function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rmsana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of short-term Root Mean Square amplitude (From the 'wrassp' package) — rmsana","text":"","code":"rmsana(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   windowShift = 5,   windowSize = 20,   effectiveLength = TRUE,   linear = FALSE,   window = \"HAMMING\",   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/rmsana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of short-term Root Mean Square amplitude (From the 'wrassp' package) — rmsana","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>:  set begin analysis interval <time> seconds (default = 0: begin file) centerTime = <time>: set single-frame analysis analysis window centred <time> seconds;  overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default: end file) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) windowSize = <dur>: set analysis window size <dur> ms; overrules effectiveLength option effectiveLength make window size effective rather exact linear calculate linear RMS values (default: values dB) window = <type>: set analysis window function <type> (default: HAMMING) toFile write results file (default extension .rms) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rmsana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of short-term Root Mean Square amplitude (From the 'wrassp' package) — rmsana","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/rmsana.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of short-term Root Mean Square amplitude (From the 'wrassp' package) — rmsana","text":"Analysis short-term Root Mean Square amplitude signal <listOfFiles>. Per default, RMS values expressed decibel (dB) correspond short-term power signal. Analysis results written file base name input file extension '.rms'. Default output SSFF binary format (track 'rms').","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/seenc.html","id":null,"dir":"Reference","previous_headings":"","what":"(En)coded spectral envelope estimation — seenc","title":"(En)coded spectral envelope estimation — seenc","text":"Spectral envelope estimated using function assessing band-aperiodicities using CheapTrick algorithm (Morise 2015-03)  implemented WORLD vocoder (MORISE et al. 2016) . harvest pitch algorithm (Morise 2017)  used calculate periodic component.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/seenc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(En)coded spectral envelope estimation — seenc","text":"","code":"seenc(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 70,   maxF = 200,   dimensions = 1,   explicitExt = \"sec\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/seenc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(En)coded spectral envelope estimation — seenc","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. dimensions Number dimensions coded spectral envelope explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/seenc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(En)coded spectral envelope estimation — seenc","text":"SSFF track object containing two tracks (f0 corr) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/seenc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(En)coded spectral envelope estimation — seenc","text":"Morise M (2015-03). “CheapTrick, spectral envelope estimator high-quality speech synthesis.” Speech Communication, 67(0), 1 -- 7. doi:10.1016/j.specom.2014.09.003 , http://www.sciencedirect.com/science/article/pii/S0167639314000697. Morise M (2017). “Harvest: High-Performance Fundamental Frequency Estimator Speech Signals.” Interspeech 2017, 2321--2325. doi:10.21437/interspeech.2017-68 . MORISE M, YOKOMORI F, OZAWA K (2016). “WORLD: Vocoder-Based High-Quality Speech Synthesis System Real-Time Applications.” IEICE Transactions Information Systems, E99.D(7), 1877--1884. ISSN 0916-8532, doi:10.1587/transinf.2015edp7457 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToFormant.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Praat Formant object from an SSFF track track — ssffToFormant","title":"Make a Praat Formant object from an SSFF track track — ssffToFormant","text":"function takes SSFF object path file containing one, reads content fm.field bw.field uses Praat construct Formant object store file. function's primary purpose allow user re-use already computed, possibly adjusted, formant frequency bandwidth tracks subsequent calculations instance praat_sauce.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToFormant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Praat Formant object from an SSFF track track — ssffToFormant","text":"","code":"ssffToFormant(   inData,   outputPath = NULL,   fm.field = \"fm\",   bw.field = \"bw\",   start = 0,   end = 0,   windowShift = 5,   nominalF1 = 500,   zero.threshold = 0,   dump.script = FALSE,   soundFileDuration = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToFormant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Praat Formant object from an SSFF track track — ssffToFormant","text":"inData SSFF formant track object, full path one. outputPath directory Formant file stored. fm.field field / column SSFF object formant frequency tracks stored. field may indicated name , number. Often, SSFF object contain formant frequency values first field bandwidths second, user also give field=1 argument. bw.field field / column SSFF object formant banwidth tracks stored. field may indicated name , number. Often, SSFF object contain formant frequency values first field bandwidths second, user also give field=2 argument. start optional start time (s) part SSFF formant track converted Formant object. end optional end time (s) part SSFF formant track converted Formant object. windowShift analysis window formant track (ms). nominalF1 assumed F$_1$ value created Formant object. zero.threshold threshold formant frequencies bandwidths considered zero. dump.script TRUE, Praat script used create Pitch object dumped file debuging inspection. file placed directory output Formant file, '.praat'. extension. soundFileDuration explicit duration set created Formant object. explicitly supplied, duration SSFF object track used instead.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToFormant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Praat Formant object from an SSFF track track — ssffToFormant","text":"user may optionally compute Formant object parts SSFF formant track track stored file. ability subset SSFF object directly currently implemented. Please note process converting formant tracks SSFF slow, shown microbenchmark output indicates constructing Formant object using current strategy takes 353 times time takes simply compute formant tracks.","code":"Unit: relative expr         min          lq        mean      median          uq         max neval read      1.0000      1.0000      1.0000      1.0000      1.0000      1.0000     1 forest    705.8529    705.8529    705.8529    705.8529    705.8529    705.8529     1 Formant 249267.5829 249267.5829 249267.5829 249267.5829 249267.5829 249267.5829     1"},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToPitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Pitch object from an SSFF f0 track — ssffToPitch","title":"Make a Pitch object from an SSFF f0 track — ssffToPitch","text":"function takes SSFF object path file containing one, reads content specific field (channel/column required) uses Praat construct Pitch object store file. function's primary purpose allow user re-use already computed, possibly adjusted, pitch tracks subsequent calculations instance praat_sauce.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToPitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Pitch object from an SSFF f0 track — ssffToPitch","text":"","code":"ssffToPitch(   inData,   outputPath = NULL,   field = 1,   channel = 1,   start = 0,   end = 0,   zero.threshold = 0,   dump.script = FALSE,   soundFileDuration = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToPitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Pitch object from an SSFF f0 track — ssffToPitch","text":"inData SSFF f0 track object, full path one. outputPath directory Pitch file stored. field field / column SSFF object f0 track values stored. field may indicated name , number. Often, SSFF object contain just one field, one containing f0 values, field=1 therefore good default. channel channel / column field used construct pitch track. likely uncommon channel values higher one used real world applications. start optional start time (s) part SSFF f0 track converted Pitch object. end optional end time (s) part SSFF f0 track converted Pitch object. zero.threshold threshold f~0~ values considered indicate unvoiced frame. default zero, SSFF format Praat pitch tracks encode lack voicing. however also possible trim away really low f$_0$ values making Pitch object choosing higher threshold. dump.script TRUE, Praat script used create Pitch object dumped file debuging inspection. file placed directory output Pitch file, '.praat'. extension. soundFileDuration explicit duration set created Pitch object. explicitly supplied, duration SSFF object track used instead.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToPitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Pitch object from an SSFF f0 track — ssffToPitch","text":"path created Pitch file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/ssffToPitch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Pitch object from an SSFF f0 track — ssffToPitch","text":"user may optionally compute Pitch object parts SSFF pitch track track stored file. ability subset SSFF object directly currently implemented.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/store_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides the ability to store a multidimensional feature set related to a\npart of a signal. — store_slice","title":"Provides the ability to store a multidimensional feature set related to a\npart of a signal. — store_slice","text":"function allow associate feature vector high dimensionality part signal computed. part can time slice (defined start end times), entire signal. collection time windows data obtained viewed sparse collection slices. slice defined start end times. key features idea sparse collection slices even though set features extracted slice collection consistent, consistent spacing slices time line signal file required. design choice helps storage output computationally intensive procedures summarize whole recording just part makes sense compute .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/store_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides the ability to store a multidimensional feature set related to a\npart of a signal. — store_slice","text":"","code":"store_slice(   mediaFileName,   values,   measureNames,   start_sample = NULL,   end_sample = NULL,   fileExtention = \"sli\",   outputDirectory = NULL )"},{"path":"https://humlab-speech.github.io/superassp/reference/store_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides the ability to store a multidimensional feature set related to a\npart of a signal. — store_slice","text":"mediaFileName signal file set values obtained. Primarily, name speech signal file, signal files handled well read.AsspDataObj can return sample rate number samples likely work. values list values stored. identity measurement value indicates informative list names, help retrieval values. list values named, identified integer value instead. first time user stores values analyse particular sparse slice collection file determine features may stored names may used . start_sample first sample signal file submitted analysis, results now stored. NULL, samples first sample end_sample included. end_sample last sample signal file submitted analysis, results now stored. NULL, samples end media file used. fileExtention file extension used making sparse slice name mediaFileName. Defaults \".sli\". outputDirectory directory slice file stored. defiled (NULL), sparse slice file placed folder media file.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/store_slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provides the ability to store a multidimensional feature set related to a\npart of a signal. — store_slice","text":"primary example feature set belonging sparse collection slices large collection acoustic measurements voice obtained just portion recording participant produces maximally prolonged vowel. Computing output may computationaly intensive, applying across entire signal just makes sense application. example situation, please refer vat function takes approximately 60x duration sample complete, valid vowel productions. participant may also produce one prolonged vowel recording, therefore unified analysis window apply entire speech file (case constructing spectrogram set equally spaced spectral slices). specification start_sample start_sample slice additionaly allows partially overlapping slices flexible way, can added sparse collection iteratively. user may, instance, apply analysis entire vowel, just 2s portion starting 1s vowel, store results datafile later use. example whole file feature set high-dimensional acoustic description entire speaker recording. set well suited aligned particularportion speech signal, case start_time start_time set (NULL). Even though feature set alined maximally large portion speech signal, still considered slice sparse collection slices. Sparse collection slices flexible, implementation assures two important features upheld times: results stored sparse collection slices must identially shaped. , may hold features defined first insert data . course possible multiple sparse collections (unique file extensions) user may store outputs different analyses associated single speech signal. Two slices may associated exacly portion speech signal. user supplies new result time slice (including slice including entier file), old values overwritten. ensure user always able deternine set output values obtained just start end times supplied get_slicedata, also assures efficient retrieval data. user needs , instance, apply analysis multiple times portion signal file, user instead use multiple sparse slice collection files.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/superassp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"superassp: Praat, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface — superassp-package","title":"superassp: Praat, MATLAB(TM) and wrassp speech signal processing using a wrassp-like interface — superassp-package","text":"package bundles together routines utilizes Praat, matlab python signal processing. output original routines wrapped common interface outputs SSFF file compatible output wrassp package functions. package also re-exports wrassp's functions usually enough just load superassp.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/superassp_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary table of superassp DSP function output — superassp_summary","title":"Summary table of superassp DSP function output — superassp_summary","text":"summary table produced function lists DSP function names, default file extension, summary produced SSFF tracks output file, number fields slice producing functions.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/superassp_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary table of superassp DSP function output — superassp_summary","text":"","code":"superassp_summary()"},{"path":"https://humlab-speech.github.io/superassp/reference/superassp_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary table of superassp DSP function output — superassp_summary","text":"data.frame function names row labels, \"extension\" \"tracks\" columns. output ordered file extension alphabetical order default make iseasier make sure DSP data overwritten multiple functions applied recordings.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/superassp_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary table of superassp DSP function output — superassp_summary","text":"number tracks fields produced function large, output truncated summary number tracks.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/superassp_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary table of superassp DSP function output — superassp_summary","text":"","code":"superassp_summary() #> Error in superassp_summary(): could not find function \"superassp_summary\""},{"path":"https://humlab-speech.github.io/superassp/reference/swipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute f0 using the SWIPE algorithm — swipe","title":"Compute f0 using the SWIPE algorithm — swipe","text":"function takes sound file computes f$_0$ estimate pitch using Sawtooth Waveform Inspired Pitch Estimator (SWIPE) algorithm (Camacho Harris 2008) .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/swipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute f0 using the SWIPE algorithm — swipe","text":"","code":"swipe(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   minF = 70,   maxF = 200,   voicing.threshold = 0.3,   explicitExt = \"swi\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/swipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute f0 using the SWIPE algorithm — swipe","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. voicing.threshold Voice/unvoiced threshold. Default 0.3. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile. conda.env name conda environment Python required packages stored. Please make sure know change . Defaults NULL, means default enviroment environment set RETICULATE_PYTHON environment variable used.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/swipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute f0 using the SWIPE algorithm — swipe","text":"SSFF track object containing two tracks (f0 pitch) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/swipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute f0 using the SWIPE algorithm — swipe","text":"implementation SWIPE Speech Signal Processing Toolkit (SPTK) (Group others 2017)  used, called via Python interface retiulate R package compute signal track. Therefore, user make sure python environment present can attached reticulate. anaconda environment recommended, can set user setup procedure involve least commands:   make functionality function requires available.","code":"conda create conda create --prefix -n pysuperassp python=3.8  conda activate pysuperassp pip install librosa pip install pysptk"},{"path":"https://humlab-speech.github.io/superassp/reference/swipe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute f0 using the SWIPE algorithm — swipe","text":"Camacho , Harris JG (2008). “sawtooth waveform inspired pitch estimator speech music.” Journal Acoustical Society America, 124(3), 1638--1652. ISSN 0001-4966, doi:10.1121/1.2951592 , http://www.ncbi.nlm.nih.gov/pubmed/19045655. Group SW, others (2017). “Speech Signal Processing Toolkit (SPTK), 2017.” http://sp-tk.sourceforge. net.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/torch_pitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Pitch tracking using the torch pitch tracker — torch_pitch","title":"Pitch tracking using the torch pitch tracker — torch_pitch","text":"function estimates pitch normalized cross-correlation function (NCCF) median smoothing, implemented torchaudio (Yang et al. 2021)  library. exact algorithm undisclosed implementing library approach likely builds earlier implementations use NCCFs (Talkin Kleijn 1995; Kasi Zahorian 2002)  including RAPT algorithm.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/torch_pitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pitch tracking using the torch pitch tracker — torch_pitch","text":"","code":"torch_pitch(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 10,   windowSize = 30,   minF = 70,   maxF = 200,   explicitExt = \"tpi\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/torch_pitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pitch tracking using the torch pitch tracker — torch_pitch","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/torch_pitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pitch tracking using the torch pitch tracker — torch_pitch","text":"SSFF track object containing two tracks (f0 pitch) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/torch_pitch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pitch tracking using the torch pitch tracker — torch_pitch","text":"Kasi K, Zahorian SA (2002). “Yet Another Algorithm Pitch Tracking.” 2002 IEEE International Conference Acoustics, Speech, Signal Processing, 1, --361--364. doi:10.1109/icassp.2002.5743729 . Talkin D, Kleijn WB (1995). “robust algorithm pitch tracking (RAPT).” Speech coding synthesis, 495, 518. Yang Y, Hira M, Ni Z, Chourdia , Astafurov , Chen C, Yeh C, Puhrsch C, Pollack D, Genzel D, Greenberg D, Yang EZ, Lian J, Mahadeokar J, Hwang J, Chen J, Goldsborough P, Roy P, Narenthiran S, Watanabe S, Chintala S, Quenneville-Bélair V, Shi Y (2021). “TorchAudio: Building Blocks Audio Speech Processing.” arXiv preprint arXiv:2110.15018.","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/voice_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","title":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","text":"Voice Analysis Toolbox (Tsanas et al. 2011; Tsanas 2012, 2013)  applies wide range Matlab™-implemented voice analysis procedures single sustained vowel (usually [::]) computes 339 acoustic quantities. function calls compiled application compute outcome measures sustained vowel recording directory, collect results base::data.frame.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/voice_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","text":"","code":"voice_analysis(directory)"},{"path":"https://humlab-speech.github.io/superassp/reference/voice_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","text":"directory directory sustained vowel samples stored. directory needs writable user, since compiled code also store results computations .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/voice_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","text":"tibble::tibble one row sustained vowel sample, 340 columns. first column (listOfFiles) contains file names recordings. following columns (2 340) contain measurement values recording.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/voice_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","text":"user aware applying procedure directory sound files may take 9-40 times total duration sound files perform, depending machine application compiled. user therefore make sure capture tibble returned (retrieve immidiately .Last.value variable command completes). hood, Voice Analysis Toolbox utilizes several Matlab™ toolboxes also compiled runtime binary performs procedure. permissive open source licences published external toolboxes (Little et al. 2006; Little et al. 2007; Brookes 2011)  gratefully acknowledged.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/voice_analysis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Applies the Voice Analysis Toolbox on all vowel samples in a directory — voice_analysis","text":"Brookes M (2011). “Voicebox: speech processing toolbox MATLAB [software].” Imperial College, London. Little M, McSharry P, Moroz , Roberts S (2006). “Nonlinear, biophysically-informed speech pathology detection.” 2006 IEEE International Conference Acoustics Speech Signal Processing Proceedings, volume 2, II--II. IEEE. Little M, Mcsharry P, Roberts S, Costello D, Moroz (2007). “Exploiting nonlinear recurrence fractal scaling properties voice disorder detection.” Nature Precedings, 1--1. Tsanas (2012). Accurate telemonitoring Parkinson’s disease symptom severity using nonlinear speech signal processing statistical machine learning. Ph.D. thesis, Oxford University, UK. Tsanas (2013). “Automatic objective biomarkers neurodegenerative disorders using nonlinear speech signal processing tools.” 8th International Workshop Models Analysis Vocal Emissions Biomedical Applications (MAVEBA), 37--40. Tsanas , Little MA, McSharry PE, Ramig LO (2011). “Nonlinear speech analysis algorithms mapped standard metric achieve clinically useful quantification average Parkinson's disease symptom severity.” Journal Royal Society, Interface / Royal Society, 8(59), 842 -- 855. doi:10.1098/rsif.2010.0456 .","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yaapt.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","title":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","text":"Yet Another Algorithm Pitch Tracking algorithm (Kasi Zahorian 2002)  computes f0 using Normalized Cross Correlation (NCCF) work Talkin (Talkin Kleijn 1995)  developing RAPT algorithm.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yaapt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","text":"","code":"yaapt(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   windowSize = 35,   minF = 70,   maxF = 200,   tda_frame_length = 35,   fft_length = 8192,   bp_forder = 150,   bp_low = 50,   bp_high = 1500,   nlfer_thresh1 = 0.75,   nlfer_thresh2 = 0.1,   shc_numharms = 3,   shc_window = 40,   shc_maxpeaks = 4,   shc_pwidth = 50,   shc_thresh1 = 5,   shc_thresh2 = 1.25,   f0_double = 150,   f0_half = 150,   dp5_k1 = 11,   dec_factor = 1,   nccf_thresh1 = 0.3,   nccf_thresh2 = 0.9,   nccf_maxcands = 3,   nccf_pwidth = 5,   merit_boost = 0.2,   merit_pivot = 0.99,   merit_extra = 0.4,   median_value = 7,   dp_w1 = 0.15,   dp_w2 = 0.5,   dp_w3 = 0.1,   dp_w4 = 0.9,   explicitExt = \"yf0\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/yaapt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. windowSize length analysis frame (default: 35 ms) minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. tda_frame_length frame length employed time domain analysis (defaults windowSize 35 ms). fft_length FFT length (default: 8192 samples) bp_forder order band-pass filter (default: 150) bp_low low frequency filter passband (default: 50 Hz) bp_high high frequency filter passband (default: 1500 Hz) nlfer_thresh1 NLFER (Normalized Low Frequency Energy Ratio) boundary voiced/unvoiced decisions (default: 0.75) nlfer_thresh2 threshold NLFER definitely unvoiced (default: 0.1) shc_numharms number harmonics SHC (Spectral Harmonics Correlation) calculation (default: 3) shc_window SHC window length (default: 40 Hz) shc_maxpeaks maximum number SHC peaks found (default: 4) shc_pwidth window width SHC peak picking (default: 50 Hz) shc_thresh1 threshold 1 SHC peak picking (default: 5) shc_thresh2 threshold 2 SHC peak picking (default: 1.25) f0_double pitch doubling decision threshold (default: 150 Hz) f0_half pitch halving decision threshold (default: 150 Hz) dp5_k1 weight used dynamic program (default: 11) dec_factor factor signal resampling (default: 1) nccf_thresh1 threshold considering peak NCCF (Normalized Cross Correlation Function) (default: 0.3) nccf_thresh2 threshold terminating search NCCF (default: 0.9) nccf_maxcands maximum number candidates found (default: 3) nccf_pwidth window width NCCF peak picking (default: 5) merit_boost boost merit (default. 0.20) merit_pivot merit assigned unvoiced candidates definitely unvoiced frames (default: 0.99) merit_extra merit assigned extra candidates reducing pitch doubling/halving errors (default: 0.4) median_value order medial filter (default: 7) dp_w1 DP (Dynamic Programming) weight factor voiced-voiced transitions (default: 0.15) dp_w2 DP weight factor voiced-unvoiced unvoiced-voiced transitions (default: 0.5) dp_w3 DP weight factor unvoiced-unvoiced transitions (default: 0.1) dp_w4 Weight factor local costs (default: 0.9) explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yaapt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","text":"SSFF track object containing two tracks (\"f0\" \"voiced\") contains computed pitch values, binary (0 1) indication whether frame considered \"voiced\" (1)  (0). tracks either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yaapt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","text":"YAAPT algorithm processes original acoustic signal non-linearly processed version signal partially restore weak f0 components. Intelligent peak picking select multiple f0 candidates assign merit factors; , incorporation highly robust pitch contours obtained smoothed versions low frequency portions spectrograms. Dynamic programming used find “best” pitch track among candidates, using local transition costs.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yaapt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute f0 using the algorithm named Yet Another Algorithm for Pitch Tracking — yaapt","text":"Kasi K, Zahorian SA (2002). “Yet Another Algorithm Pitch Tracking.” 2002 IEEE International Conference Acoustics, Speech, Signal Processing, 1, --361--364. doi:10.1109/icassp.2002.5743729 . Talkin D, Kleijn WB (1995). “robust algorithm pitch tracking (RAPT).” Speech coding synthesis, 495, 518.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yin.html","id":null,"dir":"Reference","previous_headings":"","what":"Pitch detection using the YIN metod — yin","title":"Pitch detection using the YIN metod — yin","text":"function applies YIN (Cheveigné Kawahara 2002)  method estimate fundamental frequency.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pitch detection using the YIN metod — yin","text":"","code":"yin(   listOfFiles,   beginTime = 0,   endTime = 0,   windowShift = 5,   windowSize = 30,   minF = 70,   maxF = 200,   trough_threshold = 0.1,   center = TRUE,   pad_mode = \"constant\",   explicitExt = \"yip\",   outputDirectory = NULL,   toFile = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/yin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pitch detection using the YIN metod — yin","text":"listOfFiles vector file paths wav files. beginTime start time section sound file processed. endTime end time section sound file processed. windowShift measurement interval (frame duration), seconds. minF Candidate f0 frequencies frequency considered. maxF Candidates frequency ignored. trough_threshold absolute threshold peak estimation. center analysis windows centered around time window (TRUE, default) window considered started indicated time point (FALSE). pad_mode mode padding occurs. Ignored center TRUE. Padding occurs python library librosa, user therefore consult manual NumPy library function numpy.pad options. explicitExt file extension used. outputDirectory set explicit directory signal file written. defined, file written directory sound file. toFile write output file? file written  outputDirectory, defined, directory soundfile.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pitch detection using the YIN metod — yin","text":"SSFF track object containing two tracks (f0 pitch) either returned (toFile == FALSE) stored disk.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pitch detection using the YIN metod — yin","text":"function calls librosa (McFee et al. 2022)  Python library load audio data make pitch related estimates.","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/yin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pitch detection using the YIN metod — yin","text":"Cheveigné Ad, Kawahara H (2002). “YIN, fundamental frequency estimator speech music.” Journal Acoustical Society America, 111(4), 1917--1930. ISSN 0001-4966, doi:10.1121/1.1458024 , http://www.ncbi.nlm.nih.gov/pubmed/12002874. McFee B, Metsai , McVicar M, Balke S, Thomé C, Raffel C, Zalkow F, Malek , Dana, Lee K, Nieto O, Ellis D, Mason J, Battenberg E, Seyfarth S, Yamamoto R, viktorandreevichmorozov, Choi K, Moore J, Bittner R, Hidaka S, Wei Z, nullmightybofo, Weiss , Hereñú D, Stöter F, Friesch P, Vollrath M, Kim T, Thassilo (2022). “librosa/librosa: 0.9.1.” doi:10.5281/zenodo.6097378 .","code":""},{"path":[]},{"path":"https://humlab-speech.github.io/superassp/reference/zcrana.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of the averages of the short-term positive and negative zero-crossing rates (From the 'wrassp' package) — zcrana","title":"Analysis of the averages of the short-term positive and negative zero-crossing rates (From the 'wrassp' package) — zcrana","text":"zcrana function adapted libassp","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/zcrana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of the averages of the short-term positive and negative zero-crossing rates (From the 'wrassp' package) — zcrana","text":"","code":"zcrana(   listOfFiles = NULL,   optLogFilePath = NULL,   beginTime = 0,   centerTime = FALSE,   endTime = 0,   windowShift = 5,   windowSize = 25,   toFile = TRUE,   explicitExt = NULL,   outputDirectory = NULL,   forceToLog = useWrasspLogger,   verbose = TRUE )"},{"path":"https://humlab-speech.github.io/superassp/reference/zcrana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of the averages of the short-term positive and negative zero-crossing rates (From the 'wrassp' package) — zcrana","text":"listOfFiles vector file paths processed function optLogFilePath path option log file beginTime = <time>: set begin analysis interval <time> seconds (default: begin file) centerTime = <time>  set single-frame analysis analysis window centred <time> seconds;  overrules beginTime, endTime windowShift options endTime = <time>: set end analysis interval <time> seconds (default: end file) windowShift = <dur>: set analysis window shift <dur> ms (default: 5.0) windowSize = <dur>:  set analysis window size <dur> ms (default: 25.0) toFile write results file (default extension .zcr) explicitExt set wish override default extension outputDirectory directory output files stored. Defaults NULL, .e. directory input files forceToLog set global package variable useWrasspLogger. set FALSE default set TRUE logging desired. verbose display infos & show progress bar","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/zcrana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of the averages of the short-term positive and negative zero-crossing rates (From the 'wrassp' package) — zcrana","text":"nrOfProcessedFiles one file process return AsspDataObj file","code":""},{"path":"https://humlab-speech.github.io/superassp/reference/zcrana.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of the averages of the short-term positive and negative zero-crossing rates (From the 'wrassp' package) — zcrana","text":"Analysis averages short-term positive negative zero-crossing rates signal <listOfFiles>. Analysis results written file base name input file extension '.zcr'. Default output SSFF binary format (track 'zcr').","code":""},{"path":[]}]
