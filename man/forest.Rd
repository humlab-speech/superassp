% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrassp_forest.R
\name{forest}
\alias{forest}
\title{Estimate formant frequencies and bandwidths}
\usage{
forest(
  listOfFiles = NULL,
  beginTime = 0,
  endTime = 0,
  windowShift = 5,
  windowSize = 20,
  effectiveLength = TRUE,
  nominalF1 = 500,
  gender = "m",
  estimate = FALSE,
  order = 0,
  incrOrder = 0,
  numFormants = 4,
  window = "BLACKMAN",
  preemphasis = -0.8,
  toFile = TRUE,
  explicitExt = "fms",
  outputDirectory = NULL,
  assertLossless = NULL,
  logToFile = FALSE,
  convertOverwrites = FALSE,
  keepConverted = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{listOfFiles}{vector of file paths to be processed by function}

\item{beginTime}{the time point (in seconds) of the start of the analysed
interval. A NULL or 0 is interpreted as the start of the signal file.
If a vector of time points is supplied, the length of that vector needs
to correspond with the length of \code{listOfFiles}.}

\item{endTime}{the time point (in seconds) of the end of the analysed
interval. A NULL or 0 is interpreted as the end of the signal file.
If a vector of time points is supplied, the length of that vector needs
to correspond with the length of \code{listOfFiles}.}

\item{windowShift}{the amount of time (in ms) that the analysis window will
be shifted between analysis frames}

\item{effectiveLength}{make window size effective rather than exact}

\item{nominalF1}{= The nominal (assumed) F1 frequency (default: 500.0 Hz)}

\item{gender}{= Use gender specific parameters? Permitted codes are  "f"\link{emale}, "m"\link{ale} or "u"\link{nknown}. When "f", the effective window length is set to 12.5 ms and the nominal \ifelse{html}{\out{F<sub>1</sub>}}{\eqn{F_1}} to 560 Hz.}

\item{estimate}{insert rough frequency estimates of missing formants? By default, the frequency is set to zero.}

\item{order}{decrease default LPC filter order by 2 (one resonance less)}

\item{incrOrder}{increase default LPC filter order by 2 (one resonance more)}

\item{numFormants}{= The number of formants to identify. Defaults to 4, and the maximum value is 8 or half the LPC filter order)}

\item{window}{= \if{html}{\out{<type>}}: set analysis window function to \if{html}{\out{<type>}} (default: BLACKMAN)}

\item{preemphasis}{= \if{html}{\out{<val>}}: set pre-emphasis factor to \if{html}{\out{<val>}} (-1 <= val <= 0)
(default: dependent on sample rate and nominal \ifelse{html}{\out{F<sub>1</sub>}}{\eqn{F_1}})}

\item{toFile}{Should the function write the results to a file, with the
(default) file extension \emph{.acf} (\code{TRUE}) or returned as a list of
\link{AsspDataObj} objects (\code{FALSE})?}

\item{explicitExt}{by default an \emph{.acf} file extension will be used when
result files are written (\code{toFile=TRUE}), but the file extension can be
set to something else using this function argument.}

\item{outputDirectory}{directory in which output files are stored. Defaults
to NULL which means that the result file will be stored in the same
directory as the input file.}

\item{assertLossless}{an optional list of file extensions that the user wants to assert
contains losslessly encoded signals data.}

\item{logToFile}{whether to log commands to a separate logfile in the
\code{outputDirectory}. Logging will otherwise be in the \code{acfana} logging
namespace of \link{logger} and will be put wherever this namespace is defined to place its output.
See \link[logger:log_appender]{logger::log_appender} for details.}

\item{verbose}{display verbose information about processing steps taken, as
well as progress bars.}
}
\value{
If \code{toFile} is \code{FALSE}, the function returns a list of \link{AsspDataObj}
objects. If \code{toFile} is \code{TRUE}, the number (integer) of successfully
processed and stored output files is returned.
}
\description{
Formant estimation of the signal(s) in \code{listOfFiles}. Raw
resonance frequency and bandwidth values are obtained by root-solving of the
Linear Prediction polynomial from the autocorrelation method and the
Split-Levinson-Algorithm (SLA). Resonances are then classified as formants
using the so-called Pisarenko frequencies (by-product of the SLA) and a
formant frequency range table derived from the nominal F1 frequency. The
latter may have to be increased by about 12\% for female voices (see
\code{nominalF1} and \code{gender} parameters). This function uses the \emph{libassp} C library
\insertCite{s5h}{superassp} for the DSP work.
}
\details{
Input signals not in a natively supported file format will be converted
before the autocorrelation functions are computed. The conversion process
will display warnings about input files that are not in known losslessly
encoded formats.

Default output is in SSFF binary format, with tracks containing the
estimated mid formant frequency of each formant (track 'fm', one column per
formant) and the associated formant bandwidth  (track 'bw', one column per
formant). If \code{toFile} is \code{TRUE}, the results will be written to a file with the
same name as the input file, but with an extension \emph{.fms}.

The function is a re-write of the \link[wrassp:forest]{wrassp::forest} function, but
with media pre-conversion, better checking of preconditions such as the
input file existance, structured logging, and the use of a more modern
framework for user feedback.

The native file type of this function is "wav" files (in "pcm_s16le"
format), SUNs "au", NIST, or CSL formats (kay or NSP extension). Input
signal conversion, when needed, is done by
\href{https://ffmpeg.org/libavcodec.html}{libavcodec} and the excellent \link{av}
wrapper package.
}
\note{
This function is not considered computationally expensive enough to require caching of
results if applied to many signals. However, if the number of signals it will be applied to
is \emph{very} long, then caching of results may be warranted.
}
\examples{
# get path to audio file
path2wav <- list.files(system.file("samples","sustained", package = "superassp"), pattern = glob2rx("a1.wav"), full.names = TRUE)


# calculate formant values
res <- forest(path2wav, toFile=FALSE)

# plot formant values
matplot(seq(0,numRecs.AsspDataObj(res) - 1) / rate.AsspDataObj(res) + 
          attr(res, 'startTime'), 
        res[["fm[Hz]"]], 
        type='l', 
        xlab='time (s)', 
        ylab='Formant frequency (Hz)')

}
\seealso{
\link[wrassp:acfana]{wrassp::acfana}

\link{AsspWindowTypes}

\link[av:encoding]{av::av_audio_convert}
}
\author{
Raphael Winkelmann

Lasse Bombien

Fredrik NylÃ©n
}
