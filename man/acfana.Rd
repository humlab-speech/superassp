% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrassp_acfana.R
\name{acfana}
\alias{acfana}
\title{Analysis of short-term autocorrelation function of signals}
\usage{
acfana(
  listOfFiles = NULL,
  beginTime = 0,
  centerTime = FALSE,
  endTime = 0,
  windowShift = 5,
  windowSize = 20,
  effectiveLength = TRUE,
  window = "BLACKMAN",
  analysisOrder = NULL,
  energyNormalization = FALSE,
  lengthNormalization = FALSE,
  toFile = TRUE,
  explicitExt = "acf",
  outputDirectory = NULL,
  assertLossless = NULL,
  logToFile = FALSE,
  keepConverted = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{listOfFiles}{vector of file paths to be processed by function}

\item{beginTime}{the time point (in seconds) of the start of the analysed
interval. A NULL or 0 is interpreted as the start of the signal file.
If a vector of time points is supplied, the length of that vector needs
to correspond with the length of \code{listOfFiles}.}

\item{centerTime}{sets a single-frame analysis time point (in seconds).
Overrides \code{beginTime}, \code{endTime} and \code{windowShift} parameters.}

\item{endTime}{the time point (in seconds) of the end of the analysed
interval. A NULL or 0 is interpreted as the end of the signal file.
If a vector of time points is supplied, the length of that vector needs
to correspond with the length of \code{listOfFiles}.}

\item{windowShift}{the amount of time (in ms) that the analysis window will
be shifted between analysis frames}

\item{windowSize}{the analysis window size (in ms); overrides the effect of
the \code{effectiveLength} parameter}

\item{effectiveLength}{make window size effective rather than exact}

\item{window}{= the analysis window function type ("BLACKMAN" by default).
See \link{AsspWindowTypes} for a list of supported window types.}

\item{analysisOrder}{the analysis order. The \code{NULL} or \code{0} sets the analysis
order to the sample rate (in kHz) + 3, so that a signal with a 16000 Hz
sampling rate will be analysed using an \code{analysisOrder} of 19.}

\item{energyNormalization}{calculate energy-normalized autocorrelation}

\item{lengthNormalization}{calculate length-normalized autocorrelation}

\item{toFile}{Should the function write the results to a file, with the
(default) file extension \emph{.acf} (\code{TRUE}) or returned as a list of
\link{AsspDataObj} objects (\code{FALSE})?}

\item{explicitExt}{by default an \emph{.acf} file extension will be used when
result files are written (\code{toFile=TRUE}), but the file extension can be
set to something else using this function argument.}

\item{outputDirectory}{directory in which output files are stored. Defaults
to NULL which means that the result file will be stored in the same
directory as the input file.}

\item{assertLossless}{an optional list of file extensions that the user wants to assert
contains losslessly encoded signals data.}

\item{logToFile}{whether to log commands to a separate logfile in the
\code{outputDirectory}. Logging will otherwise be in the \code{acfana} logging
namespace of \link{logger} and will be put wherever this namespace is defined to place its output.
See \link[logger:log_appender]{logger::log_appender} for details.}

\item{verbose}{display verbose information about processing steps taken, as
well as progress bars.}
}
\value{
The number of successfully written files (if \code{toFile=TRUE}), or a vector of \code{AsspDataObj} objects (if \code{toFile=FALSE}).
}
\description{
Applies the autocorrelation function to windows of the input
signals listed in \code{listOfFiles}. Input signals not in a file format natively
supported will be converted before the autocorrelation functions are
computed. The conversion process will display warnings about input files
that are not in known losslessly encoded formats.

The results will be will be written to an SSFF formated file with the base
name of the input file and extension \emph{.acf} in a track \emph{ACF}.
}
\details{
The function is a re-write of the \link[wrassp:acfana]{wrassp::acfana} function, but
with media pre-conversion, better checking of preconditions such as the
input file existance, structured logging, and the use of a more modern
framework for user feedback.

The native file type of this function is "wav" files (in "pcm_s16le"
format), SUNs "au", NIST, or CSL formats (kay or NSP extension). Input
signal conversion, when needed, is done by
\href{https://ffmpeg.org/libavcodec.html}{libavcodec} and the excellent \link[av:encoding]{av::av_audio_convert}
wrapper function
}
\note{
This function is not considered computationally expensive enough to require caching of
results if applied to many signals. However, if the number of signals it will be applied to
is \emph{very} long, then caching of results may be warranted.

Please note the unit reported is Hz², which may be accurate depending on whether the signal is
normalized or not. THe reported unit of the track \emph{ACF} is "?Hz²" to signal this uncertainty.
}
\examples{
# get path to audio file
path2wav <- list.files(system.file("samples","sustained", package = "superassp"), pattern = glob2rx("a1.wav"), full.names = TRUE)

# calculate short-term autocorrelation
res <- acfana(path2wav, toFile=FALSE)

# plot short-term autocorrelation values
matplot(seq(0,numRecs.AsspDataObj(res) - 1) / rate.AsspDataObj(res) +
        attr(res, 'startTime'),
        res$acf,
        type='l',
        xlab='time (s)',
        ylab='short-term autocorrelation values')

}
\references{
\insertAllCited{}
}
\seealso{
\link[wrassp:acfana]{wrassp::acfana}

\link{AsspWindowTypes}

\link[av:encoding]{av::av_audio_convert}
}
